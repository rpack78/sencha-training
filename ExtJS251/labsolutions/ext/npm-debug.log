0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'cordova' ]
2 info using npm@1.1.59
3 info using node@v0.8.8
4 verbose read json /usr/local/lib/package.json
5 verbose read json /usr/local/lib/package.json
6 verbose cache add [ 'cordova', null ]
7 silly cache add name=undefined spec="cordova" args=["cordova",null]
8 verbose parsed url { pathname: 'cordova', path: 'cordova', href: 'cordova' }
9 silly lockFile a98f2055-cordova cordova
10 verbose lock cordova /Users/maxrahder/.npm/a98f2055-cordova.lock
11 silly lockFile a98f2055-cordova cordova
12 verbose addNamed [ 'cordova', '' ]
13 verbose addNamed [ null, '' ]
14 silly lockFile de8d9fad-cordova cordova@
15 verbose lock cordova@ /Users/maxrahder/.npm/de8d9fad-cordova.lock
16 silly addNameRange { name: 'cordova', range: '', hasData: false }
17 verbose url raw cordova
18 verbose url resolving [ 'https://registry.npmjs.org/', './cordova' ]
19 verbose url resolved https://registry.npmjs.org/cordova
20 info retry registry request attempt 1 at 16:19:53
21 http GET https://registry.npmjs.org/cordova
22 http 200 https://registry.npmjs.org/cordova
23 verbose bad json {"_id":"cordova","_rev":"254-4e4a5c7808793a6c920ca35fa5849a85","name":"cordova","description":"Cordova command line interface tool","dist-tags":{"latest":"3.3.0-0.1.1","rc":"3.3.0-rc.1"},"versions":{"0.0.1":{"name":"cordova","version":"0.0.1","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git@github.com:imhotep/cordova-client.git"},"keywords":["cordova","client","cli"],"devDependencies":{"mocha":"*"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"}],"license":"Apache","_npmUser":{"name":"brianleroux","email":"b@brian.io"},"_id":"cordova@0.0.1","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"fb8e88bca23bcd3bb86cccb330cff9cb07e00196","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.1.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"}],"directories":{}},"0.0.2":{"name":"cordova","version":"0.0.2","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git@github.com:imhotep/cordova-client.git"},"keywords":["cordova","client","cli"],"devDependencies":{"mocha":"*"},"dependencies":{"colors":">=0.6.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"}],"license":"Apache","_npmUser":{"name":"brianleroux","email":"b@brian.io"},"_id":"cordova@0.0.2","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"13838e91fa945e13be790234ad25c5321400772a","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.2.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"}],"directories":{}},"0.0.3":{"name":"cordova","version":"0.0.3","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.1","pluginstall":"0.5.0","express":"3.0","asyncblock":"2.1.4"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\nEventually this will be available via npm. For now you must install manually:\n\n```\ngit clone https://github.com/filmaj/cordova-client.git\ncd cordova-client\nsudo npm install -g\n```\n\nthe -g flag installs cordova globally, so you can access the tool via `cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin>` | **NOT IMPLEMENTED!**\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n  \nAdditional platforms and projects can be installed, and removed, with the cordova platform/plugin add/remove subcommands. The add versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n\n#### plugins/\nany added plugins will be extracted into this directory\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets.\n\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n**WARNING**: If you run tests and don't have any sub-directories under\n`./lib`, be prepared to see some failing tests as then this project will\nstart cloning any necessary Cordova libraries (which may take a while).\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO\n\n- bootstrapping the tests\n- properly extracting info from config.xml\n- checking SDK compatibility\n- blackberry support\n- windows phone support\n- testing on machines other than Mac OS X\n- figure out versioning. for now: 2.1.0 minimum\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n### Random Notes\nposted to the mailing list by BrianL\n\nyah. there is tonnes of prior art for this stuff. I will update the wiki but quickly, this was stable: [https://github.com/brianleroux/Cordova/tree/b816aacfb7583174be9f44f71dc32c8465d1319]()\n\nthen other things happened. Those scripts ended up in the mainline projects. The idea was a standard package format for a project and upgrading would consist only of swapping out the bin directory. The scripts would live local the project avoiding version hell between releases.\n\nThis new thinking is different. We now think the native project as it were should host its own scripts. Upgrading not a consideration. Maybe it should be. You're thinking of a master global script, which is cool and something I've always wanted, but the version thing needs to be considered. perhaps not an issue between releases if the native project (the target of www) deals with the version itself...\n\ncordova-client internally depends on pluginstall, a tool written by Andrew Lunny to support installing plugins for the iOS and Android platforms [https://github.com/alunny/pluginstall]()\n","_id":"cordova@0.0.3","dist":{"shasum":"c0740b266f731a998d8d13cf858f033cfba5422c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.3.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.4":{"name":"cordova","version":"0.0.4","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.4","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\nEventually this will be available via npm. For now you must install manually:\n \n```\ngit clone https://github.com/filmaj/cordova-client.git\ncd cordova-client\nnpm install -g\n```\n\nthe -g flag installs cordova globally, so you can access the tool via `cordova`\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin>` | **NOT IMPLEMENTED!**\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n  \nAdditional platforms and projects can be installed, and removed, with the cordova platform/plugin add/remove subcommands. The add versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n\n#### plugins/\nany added plugins will be extracted into this directory\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets.\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n**WARNING**: If you run tests and don't have any sub-directories under\n`./lib`, be prepared to see some failing tests as then this project will\nstart cloning any necessary Cordova libraries (which may take a while).\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.4","dist":{"shasum":"9774e471947d5befd38f2b3893c64a7917dece21","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.4.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.5":{"name":"cordova","version":"0.0.5","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.4","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.5","dist":{"shasum":"9ec5088108a21cdb0c1e8baddc01e9fa829fb2a0","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.5.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.6":{"name":"cordova","version":"0.0.6","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.6","dist":{"shasum":"f260464c38d5dff774232bffabbf901c03ab7e3e","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.6.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.7":{"name":"cordova","version":"0.0.7","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.7","dist":{"shasum":"bbcfcbb2fbe13e3af188942753bed46c98090bc3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.7.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.8":{"name":"cordova","version":"0.0.8","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.8","dist":{"shasum":"bbbeca73b632f999c77bca96ff6639f374862d9c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.8.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.9":{"name":"cordova","version":"0.0.9","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThis file identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nA big thank you to all people who have made this project possible. For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.0.9","dist":{"shasum":"1a47a5c2ff1038485f7fa707f675ab9303c82bc5","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.9.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.0":{"name":"cordova","version":"0.1.0","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.0","dist":{"shasum":"c6e9ead8d853dd01238530a61fb0e394c6ef7436","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.0.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.1":{"name":"cordova","version":"0.1.1","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.1","dist":{"shasum":"5d62497e2159c71c00e9be98c4157aa9895b44f3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.1.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.2":{"name":"cordova","version":"0.1.2","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.2","dist":{"shasum":"6ecb12c0ff90a1f09662c45acea7859af2fb9610","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.3":{"name":"cordova","version":"0.1.3","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.3","dist":{"shasum":"8668ce5609475574e381fe2f3b1b2be54a313cc9","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.4":{"name":"cordova","version":"0.1.4","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","plist":"0.4.0","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.4","dist":{"shasum":"13ac6994e79803071576b41e1727ac5e45c55299","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.5":{"name":"cordova","version":"0.1.5","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","plist":"0.4.0","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.5","dist":{"shasum":"982a1e84a2b729b5b860b91492659bd262e74b46","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.6":{"name":"cordova","version":"0.1.6","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.6","dist":{"shasum":"ee49a226d5b7c29154040ae9944f59db478cbaad","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.6.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.7":{"name":"cordova","version":"0.1.7","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.7","dist":{"shasum":"665a7b3fb6824169627fbf99f3ef4178fd6b2f1b","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.7.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.8":{"name":"cordova","version":"0.1.8","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.8","dist":{"shasum":"78cbf063a31e5ef3d3eeba30084499175f760ce1","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.8.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.9":{"name":"cordova","version":"0.1.9","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.2","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.9","dist":{"shasum":"8b84bff05dfe4eb8250146c58d6eebf751dec0c8","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.9.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.10":{"name":"cordova","version":"0.1.10","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide).\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.10","dist":{"shasum":"3b24b531aaea8b7ef73dc6d17d42394094835bb3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.10.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.11":{"name":"cordova","version":"0.1.11","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide).\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.11","dist":{"shasum":"3522ccb020c90cf2604a5f200cc9e809502f37da","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.11.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.12":{"name":"cordova","version":"0.1.12","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.12","dist":{"shasum":"0c78c08d29bc939e424fd9c300c7f52aaa8ac65c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.12.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.13":{"name":"cordova","version":"0.1.13","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden.shepherdson@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.13","dist":{"shasum":"648416f18cea91510098e61c98d0ca760fb440c5","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.13.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"0.1.14":{"name":"cordova","version":"0.1.14","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.14","dist":{"shasum":"78af15bd68012c3893a8f002cf624fb89559d486","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.14.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.2.0":{"name":"cordova","version":"2.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova\nv2.3.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.2.0","dist":{"shasum":"d96a05c07edf887b4e1d1d87d8e3463b2c35fccd","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.2.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.0":{"name":"cordova","version":"2.3.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node test_bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.0","dist":{"shasum":"af6a7e8064f95c64dfc0f4417e290fd5ac3f2fe8","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.1":{"name":"cordova","version":"2.3.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.1","dist":{"shasum":"6c74888347a3ec277454082b8662a14af3819f45","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.2":{"name":"cordova","version":"2.3.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.2","dist":{"shasum":"5be0ff96acb7281d1999f2a1de740ad43ad4a43a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.3":{"name":"cordova","version":"2.3.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.3","dist":{"shasum":"3bdddee6c7aef486c473d5fdea2087ee657a5921","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.5":{"name":"cordova","version":"2.3.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.5","dist":{"shasum":"a56bc2f5246b632959f88ee4a92fe1e831c7132d","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.6":{"name":"cordova","version":"2.3.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.6","dist":{"shasum":"b695a691b8c096c047fd68bffe61dc0f72d44c26","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.6.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.0":{"name":"cordova","version":"2.4.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.0","dist":{"shasum":"5891715f5db492bddf7ecabbe7e12958f3a811fa","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.1":{"name":"cordova","version":"2.4.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"cd lib/cordova-android/framework && android update project -p . -t android-17 && cd ../../.. && node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.1","dist":{"shasum":"a96b738705511309a236a1c9bf399a5648c73984","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.2":{"name":"cordova","version":"2.4.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.2","dist":{"shasum":"fa345041f03d6dc85952384daf27ee8e86a613f5","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.3":{"name":"cordova","version":"2.4.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.3","dist":{"shasum":"b50cf430d3ba5fd46b772e92d2bea7211e12ab16","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.4":{"name":"cordova","version":"2.4.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.4","dist":{"shasum":"2632eda14f962e365c118294fba6eded1720c03f","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.4.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.5":{"name":"cordova","version":"2.4.5","config":{"unsafe-perm":true},"preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.5","dist":{"shasum":"d626d5436b5f3cbc32b5637d9cb5e842897effa0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.6":{"name":"cordova","version":"2.4.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.6","dist":{"shasum":"876775e94d171d75209a227a317e432186325fec","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.6.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.7":{"name":"cordova","version":"2.4.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.7","dist":{"shasum":"c6311b1828a9a0d3711e44f8ad77d51713520544","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.7.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.8":{"name":"cordova","version":"2.4.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.8","dist":{"shasum":"9c8afe90e5c90e8d59965fb5d34929efeb5b1693","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.8.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.9":{"name":"cordova","version":"2.4.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.9","dist":{"shasum":"e17c8726f0e8f8860baa1c357f817538b028c1b3","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.9.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.10":{"name":"cordova","version":"2.4.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.10","dist":{"shasum":"504fe166bfbac94f5c3415aa9fe3fe398f8dc833","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.10.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.0":{"name":"cordova","version":"2.5.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.0","dist":{"shasum":"dbeb063feab56adf77a1bf759443a9902299fc15","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.2":{"name":"cordova","version":"2.5.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.2","dist":{"shasum":"cc83d4bf875c3ec0218167af6b1c936e967d74f1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.3":{"name":"cordova","version":"2.5.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.3","dist":{"shasum":"9bb14dae41dd126fd66989033662dde0e0c3c877","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.4":{"name":"cordova","version":"2.5.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.4","dist":{"shasum":"ddbd20589912d5d99ba988c53dbfd74d7a0ad9ca","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.4.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.5":{"name":"cordova","version":"2.5.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.5","dist":{"shasum":"eb5a7b9b06c62d4641d2a163789d65c82359ab1d","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.6.0":{"name":"cordova","version":"2.6.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.0","dist":{"shasum":"8a9d0cc770027a0a864e413b01997f3ec91cd963","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.6.1":{"name":"cordova","version":"2.6.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.1","dist":{"shasum":"c572e997970d72d4b2dbe91cf8900c846881797f","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.6.2":{"name":"cordova","version":"2.6.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.2","dist":{"shasum":"ae9765c6ee145572b8059c09bb0d1d8470aba1d4","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.0-rc.1":{"name":"cordova","version":"2.7.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.0-rc.1","dist":{"shasum":"da6cc1d925f3bf9c4cc3d5e729e2a1d0c17111ea","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.0-rc.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.1-rc.1":{"name":"cordova","version":"2.7.1-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.1-rc.1","dist":{"shasum":"179071a3c75125c22be25afd79658dae1b5d746c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.1-rc.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.2":{"name":"cordova","version":"2.7.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.2","dist":{"shasum":"64efba97bba1c24c8fd8794e621f4e369b5f7046","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.3":{"name":"cordova","version":"2.7.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec/cordova-cli","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.3","dist":{"shasum":"c596b61a9f127ab849c0c0116afda313eac7920c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.4":{"name":"cordova","version":"2.7.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec/cordova-cli","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.4","dist":{"shasum":"a480eaa8e7dc309f6fdf3a6aff482d3c003d2b96","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.0":{"name":"cordova","version":"2.8.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.0","dist":{"shasum":"904e0cd881353c915d3c3daaf5aa655ebe6938d8","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.1":{"name":"cordova","version":"2.8.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.1","dist":{"shasum":"a815197f0ce6e5e92ab145462f942a7affb8f8ef","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.2":{"name":"cordova","version":"2.8.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.2","dist":{"shasum":"ab110e7594e44fa0fb81a00334cfd82890ae8867","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.3":{"name":"cordova","version":"2.8.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.3","dist":{"shasum":"c39639fff2adc9bfed86d329c7b38566e3c38fab","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.4":{"name":"cordova","version":"2.8.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.4","dist":{"shasum":"50ff60348f869908d1bf4ea0be60956f0bc3cd0c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.5":{"name":"cordova","version":"2.8.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.5","dist":{"shasum":"eff1dcc6258486a090688a7f10394665184712ce","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.6":{"name":"cordova","version":"2.8.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.6","dist":{"shasum":"d50646b433b3093c9725ef8648f9638fd049d011","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.7":{"name":"cordova","version":"2.8.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.7","dist":{"shasum":"00f6bc4552d3e361eb6ccc28591a757048660d67","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.8":{"name":"cordova","version":"2.8.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.8","dist":{"shasum":"05281dd6e2ff36d37ee0dc9f660ee1fcfd4c2d23","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.9":{"name":"cordova","version":"2.8.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.9","dist":{"shasum":"8cf27eaf4717f0ee74b9d6e6e7c8684355e36a29","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.9.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.10":{"name":"cordova","version":"2.8.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.10","dist":{"shasum":"cc0838f89b5d0571fde7845360109298710e31a3","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.10.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.11":{"name":"cordova","version":"2.8.11","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.11","dist":{"shasum":"b38fd4aea35d14231920043724ba4fbefbdfc729","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.11.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.12":{"name":"cordova","version":"2.8.12","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.12","dist":{"shasum":"1d96899cd027b8d8722374dc876eca5c02ace851","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.12.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.13":{"name":"cordova","version":"2.8.13","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.13","dist":{"shasum":"371d70bc8b093c4f047d143bddd99af5d6f473f7","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.13.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.14":{"name":"cordova","version":"2.8.14","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.14","dist":{"shasum":"3501795ed44337a8d93a6965daa2ea9aa21e9e28","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.14.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.15":{"name":"cordova","version":"2.8.15","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.15","dist":{"shasum":"d9c0216f944d3b29676c39d93cb119b6a264f845","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.15.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.16":{"name":"cordova","version":"2.8.16","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.16","dist":{"shasum":"efac40dd3e05faa1154589c66ecf0aeca81c9af1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.16.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.17":{"name":"cordova","version":"2.8.17","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.17","dist":{"shasum":"20bb6723537a7626a26255a60861d2641968a840","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.17.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.18":{"name":"cordova","version":"2.8.18","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.18","dist":{"shasum":"3dfad15622a148298d119a0fb279e84e242c75bc","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.18.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.19":{"name":"cordova","version":"2.8.19","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.19","dist":{"shasum":"18f8999deec3689eb6bcb3986c0f1a08248a19d4","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.19.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.20":{"name":"cordova","version":"2.8.20","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.20","dist":{"shasum":"c6dc8ca882cb95cbe944a2af7958ce01ba3b02c1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.20.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.21":{"name":"cordova","version":"2.8.21","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.21","dist":{"shasum":"ff0017105dac840847c7c0aa92e125b1d0d57746","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.21.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.22":{"name":"cordova","version":"2.8.22","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.13","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.22","dist":{"shasum":"d21f660626389f991f678700b1149b8c3fc23aac","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.22.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.23":{"name":"cordova","version":"2.8.23","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.13","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.23","dist":{"shasum":"b2ab5a8e090b71a0a42dd7bc77d883d3ef499411","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.23.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.24":{"name":"cordova","version":"2.8.24","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.24","dist":{"shasum":"15be3d266e235c9f8427b6c4e125218752d40329","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.24.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.25":{"name":"cordova","version":"2.8.25","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.25","dist":{"shasum":"bb4afc23793c723a6e8c18dfbf51ff7cc7a6f241","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.25.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.0":{"name":"cordova","version":"2.9.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.0","dist":{"shasum":"0c9a478a43eff7582b3da8d727926bd1cf1d24ba","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.1":{"name":"cordova","version":"2.9.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.1","dist":{"shasum":"f1fa1b98d80cdb2df509c210592788a2ddc9501a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.2":{"name":"cordova","version":"2.9.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.2","dist":{"shasum":"534fd3b9b6651b0640bcead6ae019f661bf2af7e","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.3":{"name":"cordova","version":"2.9.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.3","dist":{"shasum":"82a3dea7864543ee02e3dc7cef420e350cd5e7b0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.4":{"name":"cordova","version":"2.9.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.4","dist":{"shasum":"976e114c37be0db03a5c1d33478fb5c1ec148028","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.5":{"name":"cordova","version":"2.9.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.5","dist":{"shasum":"ec0cf33a91ef137245628c6079d9571e240150c1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.6":{"name":"cordova","version":"2.9.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.6","dist":{"shasum":"cb90fad174e11b234297c88747a8ef0dc6c8cb3a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.7":{"name":"cordova","version":"2.9.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.7","dist":{"shasum":"b0245eefc1980bce2fa82159f97a68d8c0c363cf","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.7.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1":{"name":"cordova","version":"3.0.0-rc1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.7","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1","dist":{"shasum":"7cb2ec8204a808cfcf735c862fbf823ae9a6ebc6","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1-1":{"name":"cordova","version":"3.0.0-rc1-1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.8","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1-1","dist":{"shasum":"e9b383f35033ceb2bbc5e7ecb94cfb3c642a4170","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1-1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1-3":{"name":"cordova","version":"3.0.0-rc1-3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.10","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n##Windows\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1-3","dist":{"shasum":"f3fcd9c7226819cd29ee4e6ae83a0adfb2b17451","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1-3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0":{"name":"cordova","version":"3.0.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.10","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n##Windows\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.0","dist":{"shasum":"8f689ecbe2b91e701b0c22070bb1ed3f2c5ef0c2","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.1":{"name":"cordova","version":"3.0.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.1","dist":{"shasum":"ebc52728a3a5d0185b06a3561a1963622a08f643","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.2":{"name":"cordova","version":"3.0.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.21","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.2","dist":{"shasum":"c15b4ae48fb1d2c4aca4f19ba189ed7e39fc6261","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.2.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"anis","email":"anis.kadri@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.3":{"name":"cordova","version":"3.0.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.22","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.3","dist":{"shasum":"7d8d0d748cf4b357822ddae2db4da2d7731d6bc0","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"anis","email":"anis.kadri@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.4":{"name":"cordova","version":"3.0.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.4","dist":{"shasum":"b613ec119b79c30383d78427649fefb978d91d5f","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.5":{"name":"cordova","version":"3.0.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.5","dist":{"shasum":"98fbbdef45a89924b9f3b741b492dd1e749c33c8","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.6":{"name":"cordova","version":"3.0.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.6","dist":{"shasum":"d662c2dbc17646e8d8758d3b90513906fd55b4b7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.7":{"name":"cordova","version":"3.0.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\r\n\r\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\r\n\r\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\r\n\r\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\r\n\r\n# Supported Platforms\r\n\r\n- Android\r\n- BlackBerry 10\r\n- iOS\r\n- Windows Phone 7 &amp; 8\r\n\r\n# Requirements\r\n\r\n* [nodejs](http://nodejs.org/)\r\n* SDKs for every platform you wish to support\r\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\r\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\r\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\r\n    will not work unless you have the absolute latest updates for all\r\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\r\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\r\n\r\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\r\n\r\n# Install\r\n\r\n    npm install -g cordova\r\n\r\n# Getting Started\r\n\r\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\r\n\r\n## Global Command\r\n\r\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\r\n\r\n<a name=\"project_commands\" />\r\n## Project Commands\r\n\r\n- `platform [ls | list]` list all platforms the project will build to\r\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\r\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\r\n- `plugin [ls | list]` list all plugins added to the project\r\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\r\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\r\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\r\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\r\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\r\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\r\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\r\n\r\n### Optional Flags\r\n\r\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\r\n- `-v` or `--version` will print out the version of your cordova-cli install.\r\n\r\n# Project Directory Structure\r\nA Cordova application built with cordova-cli will have the following directory structure:\r\n\r\n    myApp/\r\n    |--.cordova/\r\n    |-- merges/\r\n    | | |-- android/\r\n    | | |-- blackberry10/\r\n    | | `-- ios/\r\n    |-- www/\r\n    | `-- config.xml\r\n    |-- platforms/\r\n    | |-- android/\r\n    | |-- blackberry10/\r\n    | `-- ios/\r\n    `-- plugins/\r\n\r\n## .cordova/\r\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\r\n\r\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\r\n\r\n## merges/\r\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\r\n\r\n    merges/\r\n    |-- ios/\r\n    | `-- app.js\r\n    |-- android/\r\n    | `-- android.js\r\n    www/\r\n    `-- app.js\r\n\r\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\r\n\r\n## www/\r\n\r\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\r\n\r\n### Your Blanket: config.xml\r\n\r\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\r\n\r\n- The user-facing name can be modified via the contents of the `<name>` element.\r\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\r\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\r\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\r\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\r\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\r\n\r\n## platforms/\r\nPlatforms added to your application will have the native application project structures laid out within this directory.\r\n\r\n## plugins/\r\nAny added plugins will be extracted or copied into this directory.\r\n\r\n# Hooks\r\n\r\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\r\n\r\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\r\n\r\n## Project-specific Hooks\r\n\r\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\r\n\r\n### Examples\r\n\r\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\r\n\r\n## Module-level Hooks\r\n\r\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\r\n\r\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\r\n\r\n# Examples\r\n\r\n## Creating a new cordova project\r\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\r\n\r\n    cordova create ~/KewlApp KewlApp\r\n    cd ~/KewlApp\r\n    cordova platform add ios android\r\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\r\n    cordova build \r\n\r\nThe directory structure of KewlApp now looks like this:\r\n\r\n    KewlApp/\r\n    |-- .cordova/\r\n    |-- merges/\r\n    | |-- android/\r\n    | `-- ios/\r\n    |-- www/\r\n    | `-- index.html\r\n    |-- platforms/\r\n    | |-- android/\r\n    | | `-- …\r\n    | `-- ios/\r\n    |   `-- …\r\n    `-- plugins/\r\n      `-- Kewlio/\r\n\r\n# Contributing\r\n\r\n## Running Tests\r\n\r\n    npm test\r\n\r\n## TO-DO + Issues\r\n\r\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\r\n\r\n- Your operating system and version\r\n- The application name, directory location, and identifier used with `create`\r\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\r\n- Any error stack traces you received\r\n\r\n## Contributors\r\n\r\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\r\n\r\n\r\n# Known Issues and Troubleshooting\r\n\r\n## Any OS\r\n\r\n### Proxy Settings\r\n\r\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\r\n\r\n## Windows\r\n\r\n### Trouble Adding Android as a Platform\r\n\r\nWhen trying to add a platform on a Windows machine if you run into the following error message:\r\n    cordova library for \"android\" already exists. No need to download. Continuing.\r\n    Checking if platform \"android\" passes minimum requirements...\r\n    Checking Android requirements...\r\n    Running \"android list target\" (output to follow)\r\n    \r\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\r\n    o your path. Output:\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\r\n    at exithandler (child_process.js:633:7)\r\n    at ChildProcess.errorhandler (child_process.js:649:5)\r\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\r\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\r\n\r\nrun the command \"android list target\".  If you see:\r\n    'xcopy' is not recognized as an internal or external command,\r\n    operable program or batch file.\r\n\r\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \r\n\r\n","readmeFilename":"README.md","_id":"cordova@3.0.7","dist":{"shasum":"b6faef3ada767f3da9c34ff7f59cb1432d44f2c5","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.7.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"bennmapes","email":"benn.mapes@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.8":{"name":"cordova","version":"3.0.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.8","dist":{"shasum":"4809e925b96956e506d7d15145cff0c680ff4af7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.8.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"bennmapes","email":"benn.mapes@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.9":{"name":"cordova","version":"3.0.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.11.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.9","dist":{"shasum":"5c3ad82c011d12d22656018af6d788635598345d","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.9.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.10":{"name":"cordova","version":"3.0.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.12.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.10","dist":{"shasum":"4709c8393c511a479ed2c60b3bd63b61a542a37a","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.10.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.1.0-0.1.0":{"name":"cordova","version":"3.1.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.13.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.1.0-0.1.0","dist":{"shasum":"8b8ec1c04130ca4df252533ed49be05b3e428d5b","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.1.0-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"}],"directories":{}},"3.1.0-0.2.0":{"name":"cordova","version":"3.1.0-0.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.14.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.1.0-0.2.0","dist":{"shasum":"7fee962b7b17ea47b26e8437713edc956d01dac8","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.1.0-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-rc.1":{"name":"cordova","version":"3.2.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-rc.1","dist":{"shasum":"72561e67cb8f5fcdb9eed37cc22b38603253b333","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-rc.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.1.0":{"name":"cordova","version":"3.2.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.1.0","dist":{"shasum":"fa48dafed9b1e2dd6fba6477477423987c583cbc","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.2.0":{"name":"cordova","version":"3.2.0-0.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.2.0","dist":{"shasum":"22d52a4733e4f2686b7dad603c4cb53524c9ffb7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.3.0":{"name":"cordova","version":"3.2.0-0.3.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e","win-test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.3.0","dist":{"shasum":"5ade893424a192522fada805047f52c49acb71da","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"bhiggins","email":"bryan@bryanhiggins.net"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.2.0-0.4.0":{"name":"cordova","version":"3.2.0-0.4.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.4.0","dist":{"shasum":"db7a043c69d96f316f8bb683cdcd56308cc37e1c","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-rc.1":{"name":"cordova","version":"3.3.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.16.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nTo produce a click package for a particular architecture it is necessary to run the cordova development environment on that architecture. In other words, to make a click package for an arhmf phone, the cordova toolchain needs to be installed and run on that same phone.\n\nA future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-rc.1","dist":{"shasum":"7ad9fba92da60b3be78a66520354968c07834036","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-rc.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-0.1.0":{"name":"cordova","version":"3.3.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.17.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11","lodash":"~2.4.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n> **Note: Windows Phone 7 is deprecated as a target platform. Support will be removed in version 3.7.0, approx. May 2014.**\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\nUbuntu packages are available in a PPA for Ubuntu 13.10 (Saucy) (the current release) as well as 14.04 (Trusty) (under development).\n\n    sudo apt-add-repository ppa:cordova-ubuntu/ppa\n    sudo apt-get update\n    sudo apt-get install cordova-cli\n    npm install -g cordova\n\nTo build an application for the Ubuntu platform, the following extra packages are required:\n\n    sudo apt-get install cmake debhelper libx11-dev libicu-dev pkg-config qtbase5-dev qtchooser qtdeclarative5-dev qtfeedback5-dev qtlocation5-dev qtmultimedia5-dev qtpim5-dev qtsensors5-dev qtsystems5-dev\n\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nThe initial release of cordova-ubuntu does not support building applications for armhf devices automatically. It is possible to produce applications and click packages in a few steps though.\n\nThis bug report documents the issue and solutions for it: https://bugs.launchpad.net/ubuntu/+source/cordova-ubuntu/+bug/1260500 A future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-0.1.0","dist":{"shasum":"9239f452f635a9b89b71b6db1b4a51cb1f59be93","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-0.1.0.tgz","noattachment":true},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-0.1.1":{"name":"cordova","version":"3.3.0-0.1.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.17.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11","lodash":"~2.4.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n> **Note: Windows Phone 7 is deprecated as a target platform. Support will be removed in version 3.7.0, approx. May 2014.**\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\nUbuntu packages are available in a PPA for Ubuntu 13.10 (Saucy) (the current release) as well as 14.04 (Trusty) (under development).\n\n    sudo apt-add-repository ppa:cordova-ubuntu/ppa\n    sudo apt-get update\n    sudo apt-get install cordova-cli\n    npm install -g cordova\n\nTo build an application for the Ubuntu platform, the following extra packages are required:\n\n    sudo apt-get install cmake debhelper libx11-dev libicu-dev pkg-config qtbase5-dev qtchooser qtdeclarative5-dev qtfeedback5-dev qtlocation5-dev qtmultimedia5-dev qtpim5-dev qtsensors5-dev qtsystems5-dev\n\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nThe initial release of cordova-ubuntu does not support building applications for armhf devices automatically. It is possible to produce applications and click packages in a few steps though.\n\nThis bug report documents the issue and solutions for it: https://bugs.launchpad.net/ubuntu/+source/cordova-ubuntu/+bug/1260500 A future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-0.1.1","dist":{"shasum":"142d353de922f3d1efe1b04b1b7c908905f660fe","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"agrieve","email":"agrieve@chromium.org"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"2.9.0-rc1":{"name":"cordova","version":"2.9.0-rc1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.0-rc1","dist":{"shasum":"bc9d89a9f91aa92b66419c9d25a32c5224f362b0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.0rc1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}}},"readme":"cordova-client\n==============\n\nCordova client allows you to create, build and emulate Cordova projects.\n\nCordova client uses the platform specific scripts for creating, building and emulating projects. Your projects have to be created using either the platform specific create script or the cordova client master script.\n\nCordova client supports iOS and Android for now. More platforms will be added soon!\n\nCordova client requires:\n\n- [nodejs](http://nodejs.org/)\n- [iOS SDK](http://developer.apple.com)\n- [Android SDK](http://developer.android.com)\n\nCordova client has been tested on Windows, Linux and Mas OS X.\n\n\nUsing cordova client\n====================\n\nCreating projects\n-----------------\n\n    cordova create [[platform:[directory]:[package_name]:[project_name]] [platform:[directory]:[package_name]:[project_name]]...|cordova.conf]\n<!-- -->\n\n- directory: path to your new Cordova based project\n- package_name: following reverse-domain style convention\n- project_name: Cordova based project name\n\nWhen called with no arguments _cordova create_ will generate an _cordova-ios-example_ and _cordova-android-example_ in the current directory\n\ncordova.conf format\n-------------------\n\ncordova.conf should be formatted this way:\n\n    platform directory package_name project_name\n    platform directory package_name project_name\n\nDefault cordova.conf:\n\n    ios ~/Projects/ios-example com.example.cordovaexample CordovaExample\n    android ~/Projects/android-example com.example.cordovaexample CordovaExample\n\nBuilding projects\n-----------------\n\n    cordova build [[directory] [directory]...|cordova.conf]\n\nYou can call _cordova build_ with no arguments if you are inside a cordova based project. _cordova build_ will just call the _./cordova/debug_ script.\n\n\nEmulating projects\n------------------\n\n    cordova emulate [directory] [directory]...|cordova.conf\n\nWill launch the platform's emulator\n\n\nExamples:\n=========\n\nCreating a sample iOS and android project\n-----------------------------------------\n\n    cordova create\n\nthis will generate two projects in the current directory: _ios-example_ and _android-example_\n\nCreating a sample iOS project and android project with specific arguments\n-------------------------------------------------------------------------\n    \n    cordova create ios:./my-ios-project:com.example.myiospackage:CordovaExample android:./my-android-project:com.example.myandroidpackage:CordovaActivity\n\nBuilding projects (platform does not matter)\n--------------------------------------------\n\n    cordova build ./ios-example ./android-example\n\nEmulating projects (platform does not matter)\n--------------------------------------------\n\n    cordova emulate ./ios-example ./android-example\n","maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"time":{"0.0.1":"2012-07-14T22:05:41.616Z","0.0.2":"2012-07-15T05:02:00.717Z","0.0.3":"2012-09-12T20:58:00.058Z","0.0.4":"2012-09-23T18:20:25.366Z","0.0.5":"2012-09-24T18:56:37.334Z","0.0.6":"2012-09-26T00:10:41.285Z","0.0.7":"2012-09-26T20:50:22.939Z","0.0.8":"2012-10-01T06:52:58.870Z","0.0.9":"2012-10-03T18:55:08.227Z","0.1.0":"2012-10-04T07:41:58.699Z","0.1.1":"2012-10-05T16:28:22.754Z","0.1.2":"2012-10-06T01:52:29.094Z","0.1.3":"2012-10-09T23:13:22.562Z","0.1.4":"2012-10-10T22:15:39.867Z","0.1.5":"2012-10-18T20:24:07.129Z","0.1.6":"2012-10-22T22:40:18.181Z","0.1.7":"2012-10-24T23:37:01.234Z","0.1.8":"2012-10-25T00:28:13.591Z","0.1.9":"2012-11-01T22:25:21.228Z","0.1.10":"2012-11-06T21:03:20.275Z","0.1.11":"2012-11-20T20:09:30.018Z","0.1.12":"2012-11-21T05:46:55.847Z","0.1.13":"2012-11-21T22:09:36.206Z","0.1.14":"2012-11-28T20:03:16.085Z","2.2.0":"2012-12-17T19:48:26.342Z","2.3.0":"2013-01-09T22:59:40.049Z","2.3.1":"2013-01-09T23:30:05.415Z","2.3.2":"2013-01-10T00:56:58.029Z","2.3.3":"2013-01-10T21:25:17.650Z","2.3.5":"2013-01-18T00:02:35.220Z","2.3.6":"2013-01-18T21:11:02.032Z","2.4.0":"2013-01-22T01:56:56.019Z","2.4.1":"2013-01-24T19:20:30.713Z","2.4.2":"2013-01-24T20:10:14.654Z","2.4.3":"2013-02-05T01:08:52.753Z","2.4.4":"2013-02-06T19:05:50.866Z","2.4.5":"2013-02-08T22:17:09.483Z","2.4.6":"2013-02-08T23:01:55.008Z","2.4.7":"2013-02-15T20:25:03.641Z","2.4.8":"2013-02-15T22:10:30.026Z","2.4.9":"2013-02-16T01:28:08.790Z","2.4.10":"2013-02-19T18:40:07.620Z","2.5.0":"2013-02-21T19:45:27.417Z","2.5.2":"2013-03-05T00:22:08.301Z","2.5.3":"2013-03-06T22:50:38.581Z","2.5.4":"2013-03-07T19:50:18.270Z","2.5.5":"2013-03-13T19:59:52.826Z","2.6.0":"2013-03-25T21:54:51.633Z","2.6.1":"2013-04-17T22:42:43.219Z","2.6.2":"2013-04-17T22:53:42.013Z","2.7.0-rc.1":"2013-04-24T22:00:16.583Z","2.7.1-rc.1":"2013-04-25T00:46:18.098Z","2.7.2":"2013-04-30T21:06:38.503Z","2.7.3":"2013-05-15T20:55:30.104Z","2.7.4":"2013-05-22T22:40:52.670Z","2.8.0":"2013-06-03T22:33:54.295Z","2.8.1":"2013-06-04T00:13:38.655Z","2.8.2":"2013-06-04T15:47:44.450Z","2.8.3":"2013-06-05T00:27:27.990Z","2.8.4":"2013-06-05T15:22:03.496Z","2.8.5":"2013-06-05T18:56:46.348Z","2.8.6":"2013-06-05T19:20:09.457Z","2.8.7":"2013-06-05T19:38:16.964Z","2.8.8":"2013-06-05T21:43:09.248Z","2.8.9":"2013-06-05T22:14:29.025Z","2.8.10":"2013-06-06T19:29:25.142Z","2.8.11":"2013-06-07T01:06:24.526Z","2.8.12":"2013-06-07T01:12:36.511Z","2.8.13":"2013-06-07T07:34:43.411Z","2.8.14":"2013-06-10T18:47:26.009Z","2.8.15":"2013-06-12T17:14:08.217Z","2.8.16":"2013-06-13T18:26:22.915Z","2.8.17":"2013-06-13T19:02:11.386Z","2.8.18":"2013-06-14T20:24:59.897Z","2.8.19":"2013-06-14T21:05:03.129Z","2.8.20":"2013-06-18T21:35:14.772Z","2.8.21":"2013-06-18T22:25:18.635Z","2.8.22":"2013-06-19T20:30:02.207Z","2.8.23":"2013-06-20T00:44:24.765Z","2.8.24":"2013-06-20T16:29:44.973Z","2.8.25":"2013-06-20T18:35:48.361Z","2.9.0":"2013-06-26T22:52:18.958Z","2.9.1":"2013-07-03T18:44:49.068Z","2.9.2":"2013-07-09T06:58:44.985Z","2.9.3":"2013-07-12T02:15:47.959Z","2.9.4":"2013-07-12T03:58:43.203Z","2.9.5":"2013-07-12T18:56:02.185Z","2.9.6":"2013-07-16T00:25:41.753Z","2.9.7":"2013-07-16T19:14:29.605Z","3.0.0-rc1":"2013-07-16T23:04:53.695Z","3.0.0-rc1-1":"2013-07-17T16:50:05.631Z","3.0.0-rc1-3":"2013-07-18T20:49:08.657Z","3.0.0":"2013-07-19T16:08:57.240Z","3.0.1":"2013-07-24T22:55:06.338Z","3.0.2":"2013-07-29T00:34:50.407Z","3.0.3":"2013-07-29T01:06:52.697Z","3.0.4":"2013-07-31T17:39:03.446Z","3.0.5":"2013-08-12T20:59:29.645Z","3.0.6":"2013-08-12T22:14:04.960Z","3.0.7":"2013-08-27T18:00:00.406Z","3.0.8":"2013-08-28T23:02:38.414Z","3.0.9":"2013-09-05T19:30:52.643Z","3.0.10":"2013-09-20T22:25:25.167Z","3.1.0-0.1.0":"2013-10-02T18:17:38.648Z","3.1.0-0.2.0":"2013-10-29T18:38:39.703Z","3.2.0-rc.1":"2013-11-12T22:03:28.078Z","3.2.0-0.1.0":"2013-11-23T00:15:02.722Z","3.2.0-0.2.0":"2013-11-27T19:52:25.400Z","3.2.0-0.3.0":"2013-11-29T18:54:58.606Z","3.2.0-0.4.0":"2013-12-04T23:40:03.031Z","3.3.0-rc.1":"2013-12-06T21:21:30.677Z","3.3.0-0.1.0":"2013-12-12T23:26:54.542Z","3.3.0-0.1.1":"2013-12-13T20:00:05.656Z","2.9.0-rc1":"2013-06-20T21:46:36.330Z"},"author":{"name":"Anis Kadri"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"_attachments":{"cordova-3.3.0-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":253,"digest":"md5-tZqiqTtG0wbIJm3oOxYHww==","length":172497,"stub":true},"cordova-3.3.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":247,"digest":"md5-zfA7wVXEZ5tFdgq/xHxAJA==","length":764420,"stub":true},"cordova-3.2.0-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":245,"digest":"md5-OoPmooAnLkhzhIbuqYezCg==","length":168664,"stub":true},"cordova-3.2.0-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":243,"digest":"md5-AHTLcDBlYThVvg1pQcZ00A==","length":1502674,"stub":true},"cordova-3.2.0-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":240,"digest":"md5-A7r06/GX5E8mqDDdZrEang==","length":63778,"stub":true},"cordova-3.2.0-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":238,"digest":"md5-sny500YaqhY2h5cbD9wPjA==","length":195835,"stub":true},"cordova-3.2.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":235,"digest":"md5-VrLqExGqpQj1BD25ETTsug==","length":62409,"stub":true},"cordova-3.1.0-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":233,"digest":"md5-IKyiLXeq1HAmA5mZS1U9Dg==","length":61027,"stub":true},"cordova-3.1.0-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":230,"digest":"md5-b2YGIexo8if0OqqkyobteQ==","length":54541,"stub":true},"cordova-3.0.10.tgz":{"content_type":"application/octet-stream","revpos":226,"digest":"md5-rvN8RM06iZ84o5jj0p95zQ==","length":53344,"stub":true},"cordova-3.0.9.tgz":{"content_type":"application/octet-stream","revpos":224,"digest":"md5-eEEWzI8SUSwsmkWCoOlLAw==","length":50708,"stub":true},"cordova-3.0.8.tgz":{"content_type":"application/octet-stream","revpos":222,"digest":"md5-AjHgh9LbCsD+b1HvpY3eXA==","length":49937,"stub":true},"cordova-3.0.7.tgz":{"content_type":"application/octet-stream","revpos":220,"digest":"md5-QnQRizYxnKTSFtUrdM9l2g==","length":50016,"stub":true},"cordova-3.0.6.tgz":{"content_type":"application/octet-stream","revpos":216,"digest":"md5-0+XuOof2jiPt/Tjd1Y5+dQ==","length":47537,"stub":true},"cordova-3.0.5.tgz":{"content_type":"application/octet-stream","revpos":214,"digest":"md5-4iAXxA0DpXKJJvFMxyHF6A==","length":47518,"stub":true},"cordova-3.0.4.tgz":{"content_type":"application/octet-stream","revpos":212,"digest":"md5-zuj/MKoQsyUg/seJXZrzmw==","length":45381,"stub":true},"cordova-3.0.3.tgz":{"content_type":"application/octet-stream","revpos":210,"digest":"md5-MpLKbUtsE1GUMDcjCYThrQ==","length":43939,"stub":true},"cordova-3.0.2.tgz":{"content_type":"application/octet-stream","revpos":208,"digest":"md5-TIJ8su988qA4QattfAYNdw==","length":43942,"stub":true},"cordova-3.0.1.tgz":{"content_type":"application/octet-stream","revpos":205,"digest":"md5-wQoXFAA7KKm3yVNw3k3dDg==","length":43525,"stub":true},"cordova-3.0.0.tgz":{"content_type":"application/octet-stream","revpos":203,"digest":"md5-ySWYw71cOuZUNA+BaPGuAg==","length":43013,"stub":true},"cordova-3.0.0rc1-3.tgz":{"content_type":"application/octet-stream","revpos":201,"digest":"md5-EDWNHp7LaD801tt4TleKUg==","length":43015,"stub":true},"cordova-3.0.0rc1-1.tgz":{"content_type":"application/octet-stream","revpos":199,"digest":"md5-XgYidnxOA8xvsdiMiejVRg==","length":42580,"stub":true},"cordova-3.0.0rc1.tgz":{"content_type":"application/octet-stream","revpos":197,"digest":"md5-mrO4xJjd7lftWrXibLVm+A==","length":42583,"stub":true},"cordova-2.9.7.tgz":{"content_type":"application/octet-stream","revpos":195,"digest":"md5-EnkijyssnqXnP/YbZ+MaFw==","length":43272,"stub":true},"cordova-2.9.6.tgz":{"content_type":"application/octet-stream","revpos":193,"digest":"md5-NQEh23RNVJF8KqEXxk9wkA==","length":43238,"stub":true},"cordova-2.9.5.tgz":{"content_type":"application/octet-stream","revpos":191,"digest":"md5-04zRkO8bIktqIhQ8LL8Qrw==","length":43115,"stub":true},"cordova-2.9.4.tgz":{"content_type":"application/octet-stream","revpos":189,"digest":"md5-lOEcHxTAyTbRP+od+FWJgg==","length":43045,"stub":true},"cordova-2.9.3.tgz":{"content_type":"application/octet-stream","revpos":187,"digest":"md5-ZPuPoO6S3WDDCscMcUWUPQ==","length":42951,"stub":true},"cordova-2.9.2.tgz":{"content_type":"application/octet-stream","revpos":185,"digest":"md5-QJRcuNo/0aSVV4Bkx5GmVA==","length":43163,"stub":true},"cordova-2.9.1.tgz":{"content_type":"application/octet-stream","revpos":183,"digest":"md5-ckK5UzrHecv1pQus5/1mpA==","length":43268,"stub":true},"cordova-2.9.0.tgz":{"content_type":"application/octet-stream","revpos":177,"digest":"md5-dDSYjzV/SN78/q3Oq7f8YQ==","length":44299,"stub":true},"cordova-2.9.0rc1.tgz":{"content_type":"application/octet-stream","revpos":175,"digest":"md5-rQsWZlk+2YAMRJECL3hWSw==","length":44165,"stub":true},"cordova-2.8.25.tgz":{"content_type":"application/octet-stream","revpos":173,"digest":"md5-bvFNQ4BToZ8FMD7R687zYw==","length":44305,"stub":true},"cordova-2.8.24.tgz":{"content_type":"application/octet-stream","revpos":171,"digest":"md5-yeRrnLyhX9JmjKv4/jubQg==","length":43108,"stub":true},"cordova-2.8.23.tgz":{"content_type":"application/octet-stream","revpos":169,"digest":"md5-07534Vp3wrzNeepn/fTsUQ==","length":42578,"stub":true},"cordova-2.8.22.tgz":{"content_type":"application/octet-stream","revpos":167,"digest":"md5-C1Tb7cenQjyXbVCwFecLUA==","length":43456,"stub":true},"cordova-2.8.21.tgz":{"content_type":"application/octet-stream","revpos":165,"digest":"md5-fOLWFVsgDL5+g+MJ6x7Iug==","length":43426,"stub":true},"cordova-2.8.20.tgz":{"content_type":"application/octet-stream","revpos":163,"digest":"md5-UNziMEQ2WKDBXzvDKdVHvw==","length":43601,"stub":true},"cordova-2.8.19.tgz":{"content_type":"application/octet-stream","revpos":161,"digest":"md5-fOUrYHi4hFKhcLqB9BzfhQ==","length":43063,"stub":true},"cordova-2.8.18.tgz":{"content_type":"application/octet-stream","revpos":159,"digest":"md5-5fVkgiBgbL9JMfclsWe6mg==","length":42992,"stub":true},"cordova-2.8.17.tgz":{"content_type":"application/octet-stream","revpos":157,"digest":"md5-EvbbPlhCT9G9HnVve+oyjA==","length":41750,"stub":true},"cordova-2.8.16.tgz":{"content_type":"application/octet-stream","revpos":155,"digest":"md5-lGlKYSwQcF+Uz0l7Lc/hnw==","length":41526,"stub":true},"cordova-2.8.15.tgz":{"content_type":"application/octet-stream","revpos":153,"digest":"md5-Na3s+04Scy9FBRIRjL8+sw==","length":20229103,"stub":true},"cordova-2.8.14.tgz":{"content_type":"application/octet-stream","revpos":151,"digest":"md5-WB2SqXrOxFYAfTpF7zhQQQ==","length":66854285,"stub":true},"cordova-2.8.13.tgz":{"content_type":"application/octet-stream","revpos":149,"digest":"md5-opAX7Zbf8IA2mULrb+2bpg==","length":66854319,"stub":true},"cordova-2.8.12.tgz":{"content_type":"application/octet-stream","revpos":147,"digest":"md5-uJq0ZaxhfKElApfEbsQgAg==","length":65498029,"stub":true},"cordova-2.8.11.tgz":{"content_type":"application/octet-stream","revpos":145,"digest":"md5-wHimVFEmIfKvMeCbqGNq3w==","length":65498038,"stub":true},"cordova-2.8.10.tgz":{"content_type":"application/octet-stream","revpos":143,"digest":"md5-Yj8xYr6Nnu/M93xb2jg10g==","length":65496453,"stub":true},"cordova-2.8.9.tgz":{"content_type":"application/octet-stream","revpos":141,"digest":"md5-Pu3huUWucu949Mvaal6cJw==","length":52764414,"stub":true},"cordova-2.8.8.tgz":{"content_type":"application/octet-stream","revpos":139,"digest":"md5-xfWTjaLBg2aGTBQBqvphKg==","length":52764331,"stub":true},"cordova-2.8.7.tgz":{"content_type":"application/octet-stream","revpos":137,"digest":"md5-qg0+34w9a7TQj2dyAM3UXw==","length":52764968,"stub":true},"cordova-2.8.6.tgz":{"content_type":"application/octet-stream","revpos":135,"digest":"md5-dHVdGF4heOQh1hjTpbnKbQ==","length":52764921,"stub":true},"cordova-2.8.5.tgz":{"content_type":"application/octet-stream","revpos":133,"digest":"md5-XyZlQCVYT4ZQ8zkgwtlo4g==","length":52764886,"stub":true},"cordova-2.8.4.tgz":{"content_type":"application/octet-stream","revpos":131,"digest":"md5-bWDOUvX5sqFxNFkMrNx0Tg==","length":52765133,"stub":true},"cordova-2.8.3.tgz":{"content_type":"application/octet-stream","revpos":129,"digest":"md5-vLRM9tbDv3W7OeC7ie6Bhw==","length":52765155,"stub":true},"cordova-2.8.2.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-XYJPuYAUMYxZ4D+lrlvxBQ==","length":52765683,"stub":true},"cordova-2.8.1.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-RuY+UnoTAukXz+sfOkW/cw==","length":52748059,"stub":true},"cordova-2.8.0.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-1lwro9KnowAWysIygq+ILA==","length":52747964,"stub":true},"cordova-2.7.4.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-W2wrrT7Hd+hExOpPUOOUow==","length":19293871,"stub":true},"cordova-2.7.3.tgz":{"content_type":"application/octet-stream","revpos":120,"digest":"md5-vWyxv/5TtGVt8qRchrr/UA==","length":19298253,"stub":true},"cordova-2.7.2.tgz":{"content_type":"application/octet-stream","revpos":118,"digest":"md5-C0KRJ8WovmfSwUMMNs86vQ==","length":18117382,"stub":true},"cordova-2.7.1-rc.1.tgz":{"content_type":"application/octet-stream","revpos":116,"digest":"md5-AMrQFV3/OjStF/phkg4Z4A==","length":17242909,"stub":true},"cordova-2.7.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":114,"digest":"md5-dpMT2clN38qC8f4xXcFyPg==","length":17243071,"stub":true},"cordova-2.6.2.tgz":{"content_type":"application/octet-stream","revpos":112,"digest":"md5-0GDob5uyd2CZkuErD+gUCg==","length":18069582,"stub":true},"cordova-2.6.1.tgz":{"content_type":"application/octet-stream","revpos":110,"digest":"md5-sLFd08vLxmFrYmiDEXCp9g==","length":18069117,"stub":true},"cordova-2.6.0.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-LoZwgxXH19wtfWHGw2OHSw==","length":18066986,"stub":true},"cordova-2.5.5.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-MRu8RWZYkbv3e8dUKa0X5g==","length":18005388,"stub":true},"cordova-2.5.4.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-t3Qx9lARA25kkgW5y/8Qfg==","length":18005364,"stub":true},"cordova-2.5.3.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-xozeq+NXmFgCnvw4GDdUTA==","length":36019838,"stub":true},"cordova-2.5.2.tgz":{"content_type":"application/octet-stream","revpos":99,"digest":"md5-RFGM73FPJp/HbuPcUWarwA==","length":66331190,"stub":true},"cordova-2.5.0.tgz":{"content_type":"application/octet-stream","revpos":97,"digest":"md5-/YQ4OmYb1FBaOg0GAJ/RWg==","length":66307753,"stub":true},"cordova-2.4.10.tgz":{"content_type":"application/octet-stream","revpos":95,"digest":"md5-gbP8shZcgbyr+YDYwOkDBw==","length":66302740,"stub":true},"cordova-2.4.9.tgz":{"content_type":"application/octet-stream","revpos":93,"digest":"md5-o/F2Uf3GjO1YSMOQ2+rJoA==","length":65905881,"stub":true},"cordova-2.4.8.tgz":{"content_type":"application/octet-stream","revpos":91,"digest":"md5-Z1OoyhmBSOr6CnRb8kKjrw==","length":66302802,"stub":true},"cordova-2.4.7.tgz":{"content_type":"application/octet-stream","revpos":89,"digest":"md5-YMCJIjnD5VwCmWeHVRU7GQ==","length":52772741,"stub":true},"cordova-2.4.6.tgz":{"content_type":"application/octet-stream","revpos":87,"digest":"md5-eL7dQfSIgJX/vHG58bqBvA==","length":66296458,"stub":true},"cordova-2.4.5.tgz":{"content_type":"application/octet-stream","revpos":85,"digest":"md5-DaFXXc7Eh7vEgSItOU+kuw==","length":66296470,"stub":true},"cordova-2.4.4.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-xcR1SaKMCJLQphKpW/EP5g==","length":66296444,"stub":true},"cordova-2.4.3.tgz":{"content_type":"application/octet-stream","revpos":81,"digest":"md5-p4R1LL5fXzABRwdew5lpxA==","length":67456712,"stub":true},"cordova-2.4.2.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-uyQLv4OVwHbtacO8Wmmgtw==","length":29857842,"stub":true},"cordova-2.4.1.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-7LC139+NrgvJ0kuHMnTLjw==","length":6771821,"stub":true},"cordova-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-oa17EM/u3KdHUt/weMxMDA==","length":17778870,"stub":true},"cordova-2.3.6.tgz":{"content_type":"application/octet-stream","revpos":65,"digest":"md5-nBv8UHEPE3RwHekxuRMR/A==","length":6772904,"stub":true},"cordova-2.3.5.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-Ju5e8531J2bWZYys1DgT/Q==","length":6771824,"stub":true},"cordova-2.3.3.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-8+z+kmOGwsBPoSNptyksqA==","length":6770980,"stub":true},"cordova-2.3.2.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-jvzg5+qr5fpTt6nWk4OWuw==","length":6770964,"stub":true},"cordova-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-M2BFeZyWMEBPOmOIh0Hstw==","length":6770932,"stub":true},"cordova-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-3W3T+X9mLs7dVckWe5AC1Q==","length":6770935,"stub":true},"cordova-2.2.0.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-SyJVmFaGsCyCU4KwLZaASg==","length":19359291,"stub":true},"cordova-0.1.14.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-grUxOqUfKhnYEiEonHgF9g==","length":19359522,"stub":true},"cordova-0.1.13.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-COP6KHjQE+zA9pZltq0B2Q==","length":19359656,"stub":true},"cordova-0.1.12.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-E/eooAUHCQTfOlraBl8+0g==","length":19358090,"stub":true},"cordova-0.1.11.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-rZXD7c4WonNR1MlhlN0maw==","length":19357953,"stub":true},"cordova-0.1.10.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-LeX6F0zfobzArqyZASrHFg==","length":19357797,"stub":true},"cordova-0.1.9.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-44TUGS7srXFlfeVENFM7vw==","length":19356998,"stub":true},"cordova-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-tJhjAwtQfZmma70wrcHccQ==","length":19357229,"stub":true},"cordova-0.1.7.tgz":{"content_typ
24 error registry error parsing json
25 silly registry.get cb [ 200,
25 silly registry.get   { vary: 'Accept',
25 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
25 silly registry.get     etag: '"DV7XRHV93DJQYE3IW6GA2I09Z"',
25 silly registry.get     date: 'Sun, 15 Dec 2013 14:19:57 GMT',
25 silly registry.get     'content-type': 'application/json',
25 silly registry.get     'content-length': '1339602' } ]
26 silly lockFile de8d9fad-cordova cordova@
27 error SyntaxError: Unexpected end of input
27 error {"_id":"cordova","_rev":"254-4e4a5c7808793a6c920ca35fa5849a85","name":"cordova","description":"Cordova command line interface tool","dist-tags":{"latest":"3.3.0-0.1.1","rc":"3.3.0-rc.1"},"versions":{"0.0.1":{"name":"cordova","version":"0.0.1","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git@github.com:imhotep/cordova-client.git"},"keywords":["cordova","client","cli"],"devDependencies":{"mocha":"*"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"}],"license":"Apache","_npmUser":{"name":"brianleroux","email":"b@brian.io"},"_id":"cordova@0.0.1","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"fb8e88bca23bcd3bb86cccb330cff9cb07e00196","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.1.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"}],"directories":{}},"0.0.2":{"name":"cordova","version":"0.0.2","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"mocha"},"repository":{"type":"git","url":"git@github.com:imhotep/cordova-client.git"},"keywords":["cordova","client","cli"],"devDependencies":{"mocha":"*"},"dependencies":{"colors":">=0.6.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"}],"license":"Apache","_npmUser":{"name":"brianleroux","email":"b@brian.io"},"_id":"cordova@0.0.2","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"13838e91fa945e13be790234ad25c5321400772a","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.2.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"}],"directories":{}},"0.0.3":{"name":"cordova","version":"0.0.3","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.1","pluginstall":"0.5.0","express":"3.0","asyncblock":"2.1.4"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\nEventually this will be available via npm. For now you must install manually:\n\n```\ngit clone https://github.com/filmaj/cordova-client.git\ncd cordova-client\nsudo npm install -g\n```\n\nthe -g flag installs cordova globally, so you can access the tool via `cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin>` | **NOT IMPLEMENTED!**\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n  \nAdditional platforms and projects can be installed, and removed, with the cordova platform/plugin add/remove subcommands. The add versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n\n#### plugins/\nany added plugins will be extracted into this directory\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets.\n\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n**WARNING**: If you run tests and don't have any sub-directories under\n`./lib`, be prepared to see some failing tests as then this project will\nstart cloning any necessary Cordova libraries (which may take a while).\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO\n\n- bootstrapping the tests\n- properly extracting info from config.xml\n- checking SDK compatibility\n- blackberry support\n- windows phone support\n- testing on machines other than Mac OS X\n- figure out versioning. for now: 2.1.0 minimum\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n### Random Notes\nposted to the mailing list by BrianL\n\nyah. there is tonnes of prior art for this stuff. I will update the wiki but quickly, this was stable: [https://github.com/brianleroux/Cordova/tree/b816aacfb7583174be9f44f71dc32c8465d1319]()\n\nthen other things happened. Those scripts ended up in the mainline projects. The idea was a standard package format for a project and upgrading would consist only of swapping out the bin directory. The scripts would live local the project avoiding version hell between releases.\n\nThis new thinking is different. We now think the native project as it were should host its own scripts. Upgrading not a consideration. Maybe it should be. You're thinking of a master global script, which is cool and something I've always wanted, but the version thing needs to be considered. perhaps not an issue between releases if the native project (the target of www) deals with the version itself...\n\ncordova-client internally depends on pluginstall, a tool written by Andrew Lunny to support installing plugins for the iOS and Android platforms [https://github.com/alunny/pluginstall]()\n","_id":"cordova@0.0.3","dist":{"shasum":"c0740b266f731a998d8d13cf858f033cfba5422c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.3.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.4":{"name":"cordova","version":"0.0.4","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.4","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\nEventually this will be available via npm. For now you must install manually:\n \n```\ngit clone https://github.com/filmaj/cordova-client.git\ncd cordova-client\nnpm install -g\n```\n\nthe -g flag installs cordova globally, so you can access the tool via `cordova`\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin>` | **NOT IMPLEMENTED!**\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n  \nAdditional platforms and projects can be installed, and removed, with the cordova platform/plugin add/remove subcommands. The add versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nplatforms added to your application will have the native\n application project structures laid out within this directory\n\n#### plugins/\nany added plugins will be extracted into this directory\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets.\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n**WARNING**: If you run tests and don't have any sub-directories under\n`./lib`, be prepared to see some failing tests as then this project will\nstart cloning any necessary Cordova libraries (which may take a while).\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.4","dist":{"shasum":"9774e471947d5befd38f2b3893c64a7917dece21","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.4.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.5":{"name":"cordova","version":"0.0.5","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","wrench":"1.3.9","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.4","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.5","dist":{"shasum":"9ec5088108a21cdb0c1e8baddc01e9fa829fb2a0","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.5.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.6":{"name":"cordova","version":"0.0.6","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.6","dist":{"shasum":"f260464c38d5dff774232bffabbf901c03ab7e3e","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.6.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.7":{"name":"cordova","version":"0.0.7","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.7","dist":{"shasum":"bbcfcbb2fbe13e3af188942753bed46c98090bc3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.7.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.8":{"name":"cordova","version":"0.0.8","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"filmaj@apache.org"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X _only_. Sorry.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0rc1 and above.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\nThe -g flag installs cordova globally, so you can access the tool via `cordova`.\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n\n## Subcommands\n\nformat | description \n:------------ | :-------------\n`create <directory> [<id> [<name>]]` | create a new cordova project with optional name and id\n`platform ls` | list all platforms the project will build\n`platform add <platform>` | add a platform as a build target for the project\n`platform remove <platform>` | removes a platform as a build target for the project\n`plugin ls` | list all plugins added to the project\n`plugin add <path-to-plugin>` | add a plugin to the project\n`plugin remove <plugin-name>` | remove an added plugin\n`build` | compile the app for all platforms added to the project\n`emulate` | launch emulators for all platforms added to the project\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThe .cordova directory contains the project's baked-in plugins and platforms, and meta-data used by the rest of the commands. The root project directory has a .cordova directory inside of it, and that directory identifies the parent as a cordova project. Project directories may not be nested. A Cordova project directory is recognized as such when it has a .cordova directory.  This data is generated when calling `cordova create`. It's modified when adding/removing platforms or plugins to the project.\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/ and plugins/\nAdditional platforms and projects can be installed, and removed, with the `cordova platform/plugin add/remove` subcommands. The `add` versions of these subcommands take a URI as a parameter. If the URI does not contain a protocol/scheme, it's assumed to be a 'baked in' platform/plugin. Otherwise, it's assumed to be a URL to a gzipped tar archive of the platform/plugin, in the shape of an npm package.\n\nPlatforms and projects are expected to be \"CommonJS packages\" (loosely), similar to the way npm packages are structured. The main requirement is that there be a package.json file available in the 'root directory' of the archive. The package.json file will contain additional meta-data for platforms and plugins, including pointers to such things as native code that needs to be compiled/linked/added to the application during a build.\n\n#### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n#### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n### Bash Completions\n\nIt would be useful to support Bash command-line completions, in the [same manner as git](http://en.newinstance.it/2010/05/23/git-autocompletion-and-enhanced-bash-prompt/). Completions on subcommands, plugins, platforms, files, etc.\n\n- it would be useful\n- it would force us into some consistency to maintain an easy completion script\n\n","_id":"cordova@0.0.8","dist":{"shasum":"bbbeca73b632f999c77bca96ff6639f374862d9c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.8.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.0.9":{"name":"cordova","version":"0.0.9","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n## File and Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n### .cordova/\nThis file identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n### platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n### plugins/\nAny added plugins will be extracted or copied into this directory.\n\n### www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n#### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## Managing Plugins\n\nPlugin integration hinges on:\n\n- You having the plugin code locally on your computer\n- The plugin code adheres to the [Cordova Plugin Specification](https://github.com/alunny/cordova-plugin-spec)\n\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nA big thank you to all people who have made this project possible. For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.0.9","dist":{"shasum":"1a47a5c2ff1038485f7fa707f675ab9303c82bc5","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.0.9.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.0":{"name":"cordova","version":"0.1.0","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.0","dist":{"shasum":"c6e9ead8d853dd01238530a61fb0e394c6ef7436","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.0.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.1":{"name":"cordova","version":"0.1.1","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client).\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.1","dist":{"shasum":"5d62497e2159c71c00e9be98c4157aa9895b44f3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.1.tgz"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.2":{"name":"cordova","version":"0.1.2","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). These are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.2","dist":{"shasum":"6ecb12c0ff90a1f09662c45acea7859af2fb9610","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.3":{"name":"cordova","version":"0.1.3","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform>` add a platform as a build target for the project\n- `platform [rm | remove] <platform>` removes a platform as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin>` add a plugin to the project\n- `plugin [rm | remove] <plugin-name>` remove an added plugin\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.3","dist":{"shasum":"8668ce5609475574e381fe2f3b1b2be54a313cc9","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.4":{"name":"cordova","version":"0.1.4","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git","node-xcode":"git://github.com/imhotep/node-xcode.git","plist":"0.4.0","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.4","dist":{"shasum":"13ac6994e79803071576b41e1727ac5e45c55299","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.5":{"name":"cordova","version":"0.1.5","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","plist":"0.4.0","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.5","dist":{"shasum":"982a1e84a2b729b5b860b91492659bd262e74b46","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.6":{"name":"cordova","version":"0.1.6","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* [git](https://help.github.com/articles/set-up-git)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIn it's prototype stages, cordova-client will only work on Cordova\nv2.1.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n```\ncordova create ~/KewlApp KewlApp\n\ncd ~/KewlApp\n\ncordova platform add ios\n\ncordova platform add android\n\ncordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n\ncordova build \n```\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.6","dist":{"shasum":"ee49a226d5b7c29154040ae9944f59db478cbaad","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.6.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.7":{"name":"cordova","version":"0.1.7","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.7","dist":{"shasum":"665a7b3fb6824169627fbf99f3ef4178fd6b2f1b","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.7.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.8":{"name":"cordova","version":"0.1.8","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.3.4","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.8","dist":{"shasum":"78cbf063a31e5ef3d3eeba30084499175f760ce1","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.8.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.9":{"name":"cordova","version":"0.1.9","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.2","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.9","dist":{"shasum":"8b84bff05dfe4eb8250146c58d6eebf751dec0c8","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.9.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.10":{"name":"cordova","version":"0.1.10","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide).\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.10","dist":{"shasum":"3b24b531aaea8b7ef73dc6d17d42394094835bb3","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.10.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.11":{"name":"cordova","version":"0.1.11","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide).\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.11","dist":{"shasum":"3522ccb020c90cf2604a5f200cc9e809502f37da","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.11.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.12":{"name":"cordova","version":"0.1.12","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.12","dist":{"shasum":"0c78c08d29bc939e424fd9c300c7f52aaa8ac65c","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.12.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"}],"directories":{}},"0.1.13":{"name":"cordova","version":"0.1.13","preferGlobal":"true","description":"Cordova client tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","pluginstall":"git://github.com/imhotep/pluginstall.git#0.5.3","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.7","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden.shepherdson@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.13","dist":{"shasum":"648416f18cea91510098e61c98d0ca760fb440c5","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.13.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"0.1.14":{"name":"cordova","version":"0.1.14","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://github.com/filmaj/cordova-client.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-client\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-client has been tested on Mas OS X and Linux.\n\nIf you are using cordova-client for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-client only works with Cordova\nv2.2.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-client has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-client will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-client commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-client supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-client have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-client as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [cordova-client on GitHub](http://github.com/filmaj/cordova-client). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@0.1.14","dist":{"shasum":"78af15bd68012c3893a8f002cf624fb89559d486","tarball":"http://registry.npmjs.org/cordova/-/cordova-0.1.14.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.2.0":{"name":"cordova","version":"2.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_bootstrap.js && ./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","adm-zip":"0.1.8","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova\nv2.3.0rc1.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.2.0","dist":{"shasum":"d96a05c07edf887b4e1d1d87d8e3463b2c35fccd","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.2.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.0":{"name":"cordova","version":"2.3.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node test_bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.0","dist":{"shasum":"af6a7e8064f95c64dfc0f4417e290fd5ac3f2fe8","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.1":{"name":"cordova","version":"2.3.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.1","dist":{"shasum":"6c74888347a3ec277454082b8662a14af3819f45","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.2":{"name":"cordova","version":"2.3.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.2","dist":{"shasum":"5be0ff96acb7281d1999f2a1de740ad43ad4a43a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.3":{"name":"cordova","version":"2.3.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.3","dist":{"shasum":"3bdddee6c7aef486c473d5fdea2087ee657a5921","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.5":{"name":"cordova","version":"2.3.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.5","dist":{"shasum":"a56bc2f5246b632959f88ee4a92fe1e831c7132d","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.3.6":{"name":"cordova","version":"2.3.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","unzip":"0.1.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.3.6","dist":{"shasum":"b695a691b8c096c047fd68bffe61dc0f72d44c26","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.3.6.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.0":{"name":"cordova","version":"2.4.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.0","dist":{"shasum":"5891715f5db492bddf7ecabbe7e12958f3a811fa","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.1":{"name":"cordova","version":"2.4.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"cd lib/cordova-android/framework && android update project -p . -t android-17 && cd ../../.. && node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.1","dist":{"shasum":"a96b738705511309a236a1c9bf399a5648c73984","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.1.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.2":{"name":"cordova","version":"2.4.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git://github.com/filmaj/plugman.git#0.5.5","plist":"git://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.0.8","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.2","dist":{"shasum":"fa345041f03d6dc85952384daf27ee8e86a613f5","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.3":{"name":"cordova","version":"2.4.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.3","dist":{"shasum":"b50cf430d3ba5fd46b772e92d2bea7211e12ab16","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.4":{"name":"cordova","version":"2.4.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.4","dist":{"shasum":"2632eda14f962e365c118294fba6eded1720c03f","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.4.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.5":{"name":"cordova","version":"2.4.5","config":{"unsafe-perm":true},"preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.5","dist":{"shasum":"d626d5436b5f3cbc32b5637d9cb5e842897effa0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.6":{"name":"cordova","version":"2.4.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js && ./bin/notice"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":">=1.0.0"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `build [<platform> [<platform> [...]]]` compile the app and deploy to a connected + compatible device. With no parameters builds for all platforms added to the project, otherwise builds for the specified platforms\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls` and `before_plugin_rm`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.6","dist":{"shasum":"876775e94d171d75209a227a317e432186325fec","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.6.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.7":{"name":"cordova","version":"2.4.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.7","dist":{"shasum":"c6311b1828a9a0d3711e44f8ad77d51713520544","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.7.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.8":{"name":"cordova","version":"2.4.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.8","dist":{"shasum":"9c8afe90e5c90e8d59965fb5d34929efeb5b1693","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.8.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.9":{"name":"cordova","version":"2.4.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.9","dist":{"shasum":"e17c8726f0e8f8860baa1c357f817538b028c1b3","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.9.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.4.10":{"name":"cordova","version":"2.4.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.4.10","dist":{"shasum":"504fe166bfbac94f5c3415aa9fe3fe398f8dc833","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.4.10.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.0":{"name":"cordova","version":"2.5.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com)\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\nIf you are using cordova-cli for building iOS applications, you will need to run the latest Mac OS with the latest XCode (4.5+) and XCode Command Line Tools.\n\nIn it's prototype stages, cordova-cli only works with Cordova v2.3.0.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Mac OS X, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: `sudo chown -R <username> /usr/local/lib/node_modules/cordova`\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following\ndirectory structure:\n\n    myApp/\n    |-.cordova/\n    |- platforms/\n    |- plugins/\n    `- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## platforms/\nPlatforms added to your application will have the native\n application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.0","dist":{"shasum":"dbeb063feab56adf77a1bf759443a9902299fc15","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.2":{"name":"cordova","version":"2.5.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.2","dist":{"shasum":"cc83d4bf875c3ec0218167af6b1c936e967d74f1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.3":{"name":"cordova","version":"2.5.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.3","dist":{"shasum":"9bb14dae41dd126fd66989033662dde0e0c3c877","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.3.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.4":{"name":"cordova","version":"2.5.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.4","dist":{"shasum":"ddbd20589912d5d99ba988c53dbfd74d7a0ad9ca","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.4.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.5.5":{"name":"cordova","version":"2.5.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n```\nnpm install -g cordova\n```\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles and deploys the app to a connected and compatible device. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/MyProjects/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.5.5","dist":{"shasum":"eb5a7b9b06c62d4641d2a163789d65c82359ab1d","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.5.5.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.6.0":{"name":"cordova","version":"2.6.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands). There are two types of hooks: project-specific ones and module-level ones.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.0","dist":{"shasum":"8a9d0cc770027a0a864e413b01997f3ec91cd963","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"}],"directories":{}},"2.6.1":{"name":"cordova","version":"2.6.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.1","dist":{"shasum":"c572e997970d72d4b2dbe91cf8900c846881797f","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.6.2":{"name":"cordova","version":"2.6.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.6.2","dist":{"shasum":"ae9765c6ee145572b8059c09bb0d1d8470aba1d4","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.6.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.0-rc.1":{"name":"cordova","version":"2.7.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.0-rc.1","dist":{"shasum":"da6cc1d925f3bf9c4cc3d5e729e2a1d0c17111ea","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.0-rc.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.1-rc.1":{"name":"cordova","version":"2.7.1-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.1-rc.1","dist":{"shasum":"179071a3c75125c22be25afd79658dae1b5d746c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.1-rc.1.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.2":{"name":"cordova","version":"2.7.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.2","dist":{"shasum":"64efba97bba1c24c8fd8794e621f4e369b5f7046","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.2.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.3":{"name":"cordova","version":"2.7.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec/cordova-cli","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.3","dist":{"shasum":"c596b61a9f127ab849c0c0116afda313eac7920c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.7.4":{"name":"cordova","version":"2.7.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"./node_modules/jasmine-node/bin/jasmine-node --color spec/cordova-cli","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"git+https://github.com/imhotep/plugman.git#0.5.7","plist":"git+https://github.com/filmaj/node-plist.git","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.1.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    |-- plugins/\n    `-- www/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will override the \"common\" `app.js` located inside the `www/` folder above.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n## www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. The config.xml file within this directory is very important; read on to the next section!\n\n### Your Blanket: www/config.xml \n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |- .cordova/\n    |- mergess/\n       |- android/\n       `- ios/\n    |- platforms/\n       |- android/\n       |  `- …\n       `- ios/\n          `- …\n    |- plugins/\n       `- Kewlio/\n    `- www/\n       `- index.html\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","_id":"cordova@2.7.4","dist":{"shasum":"a480eaa8e7dc309f6fdf3a6aff482d3c003d2b96","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.7.4.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.0":{"name":"cordova","version":"2.8.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.0","dist":{"shasum":"904e0cd881353c915d3c3daaf5aa655ebe6938d8","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.1":{"name":"cordova","version":"2.8.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.1","dist":{"shasum":"a815197f0ce6e5e92ab145462f942a7affb8f8ef","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.2":{"name":"cordova","version":"2.8.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.3.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.2","dist":{"shasum":"ab110e7594e44fa0fb81a00334cfd82890ae8867","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.2.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.3":{"name":"cordova","version":"2.8.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.3","dist":{"shasum":"c39639fff2adc9bfed86d329c7b38566e3c38fab","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.3.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.4":{"name":"cordova","version":"2.8.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.4","dist":{"shasum":"50ff60348f869908d1bf4ea0be60956f0bc3cd0c","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.5":{"name":"cordova","version":"2.8.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.5","dist":{"shasum":"eff1dcc6258486a090688a7f10394665184712ce","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.6":{"name":"cordova","version":"2.8.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.6","dist":{"shasum":"d50646b433b3093c9725ef8648f9638fd049d011","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.6.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.7":{"name":"cordova","version":"2.8.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.7","dist":{"shasum":"00f6bc4552d3e361eb6ccc28591a757048660d67","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.8":{"name":"cordova","version":"2.8.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.8","dist":{"shasum":"05281dd6e2ff36d37ee0dc9f660ee1fcfd4c2d23","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.9":{"name":"cordova","version":"2.8.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - [BlackBerry WebWorks SDK](http://developer.blackberry.com)\n  - [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X and Linux.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.9","dist":{"shasum":"8cf27eaf4717f0ee74b9d6e6e7c8684355e36a29","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.9.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.10":{"name":"cordova","version":"2.8.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.10","dist":{"shasum":"cc0838f89b5d0571fde7845360109298710e31a3","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.10.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.11":{"name":"cordova","version":"2.8.11","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.11","dist":{"shasum":"b38fd4aea35d14231920043724ba4fbefbdfc729","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.11.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.12":{"name":"cordova","version":"2.8.12","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.12","dist":{"shasum":"1d96899cd027b8d8722374dc876eca5c02ace851","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.12.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.13":{"name":"cordova","version":"2.8.13","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.13","dist":{"shasum":"371d70bc8b093c4f047d143bddd99af5d6f473f7","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.13.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.14":{"name":"cordova","version":"2.8.14","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.14","dist":{"shasum":"3501795ed44337a8d93a6965daa2ea9aa21e9e28","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.14.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.15":{"name":"cordova","version":"2.8.15","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"node test_runner.js","install":"node bootstrap.js"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.9","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.11.4","semver":"1.1.0","prompt":"0.2.7","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.15","dist":{"shasum":"d9c0216f944d3b29676c39d93cb119b6a264f845","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.15.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.16":{"name":"cordova","version":"2.8.16","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.16","dist":{"shasum":"efac40dd3e05faa1154589c66ecf0aeca81c9af1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.16.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.17":{"name":"cordova","version":"2.8.17","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.17","dist":{"shasum":"20bb6723537a7626a26255a60861d2641968a840","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.17.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.18":{"name":"cordova","version":"2.8.18","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.18","dist":{"shasum":"3dfad15622a148298d119a0fb279e84e242c75bc","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.18.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.19":{"name":"cordova","version":"2.8.19","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. Check out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n**NOTE**: on Unix-based machines, you may want to change the owner of the cordova directory that npm installs to. This will allow you to run cordova as local user without requiring root permissions. Assuming your node_modules directory is in `/usr/local/lib/`, you can do this by running: \n\n    sudo chown -R <username> /usr/local/lib/node_modules/cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    | |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## app/\n\nContains your app-specific content: its `www/` files, any `merges/`, and the `config.xml`. If you want to keep your app in source control, this directory should be the top of the repository.\n\n\n### app/merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `app/merges/` will override matching files in the `app/www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    app/\n    |-- merges/\n    | |-- ios/\n    | | `-- app.js\n    | `-- android/\n    |   `-- android.js\n    `--www/\n      `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `app/merges/ios/app.js`, overriding the \"common\" `app.js` located inside `app/www/`.\n\n### app/www/\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: app/config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_platform_add`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- app/\n    | |-- merges/\n    | | |-- android/\n    | | `-- ios/\n    | `- www/\n    |    `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.19","dist":{"shasum":"18f8999deec3689eb6bcb3986c0f1a08248a19d4","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.19.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.20":{"name":"cordova","version":"2.8.20","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.20","dist":{"shasum":"c6dc8ca882cb95cbe944a2af7958ce01ba3b02c1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.20.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.21":{"name":"cordova","version":"2.8.21","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.21","dist":{"shasum":"ff0017105dac840847c7c0aa92e125b1d0d57746","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.21.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.22":{"name":"cordova","version":"2.8.22","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.13","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.22","dist":{"shasum":"d21f660626389f991f678700b1149b8c3fc23aac","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.22.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.23":{"name":"cordova","version":"2.8.23","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.13","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.23","dist":{"shasum":"b2ab5a8e090b71a0a42dd7bc77d883d3ef499411","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.23.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.24":{"name":"cordova","version":"2.8.24","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.24","dist":{"shasum":"15be3d266e235c9f8427b6c4e125218752d40329","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.24.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.8.25":{"name":"cordova","version":"2.8.25","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/) as well as the [BlackBerry 10 NDK](http://developer.blackberry.com/native/download/). You will also need to have the NDK environment variables on your path by running `bb10ndk/bbndk-env.sh`.\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.8.25","dist":{"shasum":"bb4afc23793c723a6e8c18dfbf51ff7cc7a6f241","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.8.25.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.0":{"name":"cordova","version":"2.9.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.0","dist":{"shasum":"0c9a478a43eff7582b3da8d727926bd1cf1d24ba","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.1":{"name":"cordova","version":"2.9.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.1","dist":{"shasum":"f1fa1b98d80cdb2df509c210592788a2ddc9501a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.2":{"name":"cordova","version":"2.9.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.2","dist":{"shasum":"534fd3b9b6651b0640bcead6ae019f661bf2af7e","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.3":{"name":"cordova","version":"2.9.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.8.2","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.3","dist":{"shasum":"82a3dea7864543ee02e3dc7cef420e350cd5e7b0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.4":{"name":"cordova","version":"2.9.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.4","dist":{"shasum":"976e114c37be0db03a5c1d33478fb5c1ec148028","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.5":{"name":"cordova","version":"2.9.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.5","dist":{"shasum":"ec0cf33a91ef137245628c6079d9571e240150c1","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.6":{"name":"cordova","version":"2.9.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.6","dist":{"shasum":"cb90fad174e11b234297c88747a8ef0dc6c8cb3a","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"2.9.7":{"name":"cordova","version":"2.9.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.3","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.7","dist":{"shasum":"b0245eefc1980bce2fa82159f97a68d8c0c363cf","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.7.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1":{"name":"cordova","version":"3.0.0-rc1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.7","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1","dist":{"shasum":"7cb2ec8204a808cfcf735c862fbf823ae9a6ebc6","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1-1":{"name":"cordova","version":"3.0.0-rc1-1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.8","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1-1","dist":{"shasum":"e9b383f35033ceb2bbc5e7ecb94cfb3c642a4170","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1-1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0-rc1-3":{"name":"cordova","version":"3.0.0-rc1-3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.10","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n##Windows\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.0-rc1-3","dist":{"shasum":"f3fcd9c7226819cd29ee4e6ae83a0adfb2b17451","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0rc1-3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.0":{"name":"cordova","version":"3.0.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.10","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n##Windows\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.0","dist":{"shasum":"8f689ecbe2b91e701b0c22070bb1ed3f2c5ef0c2","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.1":{"name":"cordova","version":"3.0.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.11","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.1","dist":{"shasum":"ebc52728a3a5d0185b06a3561a1963622a08f643","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.1.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}},"3.0.2":{"name":"cordova","version":"3.0.2","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.21","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.2","dist":{"shasum":"c15b4ae48fb1d2c4aca4f19ba189ed7e39fc6261","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.2.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"anis","email":"anis.kadri@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.3":{"name":"cordova","version":"3.0.3","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.9.22","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.3","dist":{"shasum":"7d8d0d748cf4b357822ddae2db4da2d7731d6bc0","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.3.tgz"},"_from":".","_npmVersion":"1.3.5","_npmUser":{"name":"anis","email":"anis.kadri@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.4":{"name":"cordova","version":"3.0.4","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.4","dist":{"shasum":"b613ec119b79c30383d78427649fefb978d91d5f","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.5":{"name":"cordova","version":"3.0.5","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.5","dist":{"shasum":"98fbbdef45a89924b9f3b741b492dd1e749c33c8","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.6":{"name":"cordova","version":"3.0.6","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.6","dist":{"shasum":"d662c2dbc17646e8d8758d3b90513906fd55b4b7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"}],"directories":{}},"3.0.7":{"name":"cordova","version":"3.0.7","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\r\n\r\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\r\n\r\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\r\n\r\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\r\n\r\n# Supported Platforms\r\n\r\n- Android\r\n- BlackBerry 10\r\n- iOS\r\n- Windows Phone 7 &amp; 8\r\n\r\n# Requirements\r\n\r\n* [nodejs](http://nodejs.org/)\r\n* SDKs for every platform you wish to support\r\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\r\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\r\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\r\n    will not work unless you have the absolute latest updates for all\r\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\r\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\r\n\r\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\r\n\r\n# Install\r\n\r\n    npm install -g cordova\r\n\r\n# Getting Started\r\n\r\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\r\n\r\n## Global Command\r\n\r\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\r\n\r\n<a name=\"project_commands\" />\r\n## Project Commands\r\n\r\n- `platform [ls | list]` list all platforms the project will build to\r\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\r\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\r\n- `plugin [ls | list]` list all plugins added to the project\r\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\r\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\r\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\r\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\r\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\r\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\r\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\r\n\r\n### Optional Flags\r\n\r\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\r\n- `-v` or `--version` will print out the version of your cordova-cli install.\r\n\r\n# Project Directory Structure\r\nA Cordova application built with cordova-cli will have the following directory structure:\r\n\r\n    myApp/\r\n    |--.cordova/\r\n    |-- merges/\r\n    | | |-- android/\r\n    | | |-- blackberry10/\r\n    | | `-- ios/\r\n    |-- www/\r\n    | `-- config.xml\r\n    |-- platforms/\r\n    | |-- android/\r\n    | |-- blackberry10/\r\n    | `-- ios/\r\n    `-- plugins/\r\n\r\n## .cordova/\r\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\r\n\r\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\r\n\r\n## merges/\r\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\r\n\r\n    merges/\r\n    |-- ios/\r\n    | `-- app.js\r\n    |-- android/\r\n    | `-- android.js\r\n    www/\r\n    `-- app.js\r\n\r\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\r\n\r\n## www/\r\n\r\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\r\n\r\n### Your Blanket: config.xml\r\n\r\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\r\n\r\n- The user-facing name can be modified via the contents of the `<name>` element.\r\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\r\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\r\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\r\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\r\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\r\n\r\n## platforms/\r\nPlatforms added to your application will have the native application project structures laid out within this directory.\r\n\r\n## plugins/\r\nAny added plugins will be extracted or copied into this directory.\r\n\r\n# Hooks\r\n\r\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\r\n\r\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\r\n\r\n## Project-specific Hooks\r\n\r\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\r\n\r\n### Examples\r\n\r\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\r\n\r\n## Module-level Hooks\r\n\r\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\r\n\r\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\r\n\r\n# Examples\r\n\r\n## Creating a new cordova project\r\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\r\n\r\n    cordova create ~/KewlApp KewlApp\r\n    cd ~/KewlApp\r\n    cordova platform add ios android\r\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\r\n    cordova build \r\n\r\nThe directory structure of KewlApp now looks like this:\r\n\r\n    KewlApp/\r\n    |-- .cordova/\r\n    |-- merges/\r\n    | |-- android/\r\n    | `-- ios/\r\n    |-- www/\r\n    | `-- index.html\r\n    |-- platforms/\r\n    | |-- android/\r\n    | | `-- …\r\n    | `-- ios/\r\n    |   `-- …\r\n    `-- plugins/\r\n      `-- Kewlio/\r\n\r\n# Contributing\r\n\r\n## Running Tests\r\n\r\n    npm test\r\n\r\n## TO-DO + Issues\r\n\r\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\r\n\r\n- Your operating system and version\r\n- The application name, directory location, and identifier used with `create`\r\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\r\n- Any error stack traces you received\r\n\r\n## Contributors\r\n\r\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\r\n\r\n\r\n# Known Issues and Troubleshooting\r\n\r\n## Any OS\r\n\r\n### Proxy Settings\r\n\r\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\r\n\r\n## Windows\r\n\r\n### Trouble Adding Android as a Platform\r\n\r\nWhen trying to add a platform on a Windows machine if you run into the following error message:\r\n    cordova library for \"android\" already exists. No need to download. Continuing.\r\n    Checking if platform \"android\" passes minimum requirements...\r\n    Checking Android requirements...\r\n    Running \"android list target\" (output to follow)\r\n    \r\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\r\n    o your path. Output:\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\r\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\r\n    at exithandler (child_process.js:633:7)\r\n    at ChildProcess.errorhandler (child_process.js:649:5)\r\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\r\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\r\n\r\nrun the command \"android list target\".  If you see:\r\n    'xcopy' is not recognized as an internal or external command,\r\n    operable program or batch file.\r\n\r\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \r\n\r\n","readmeFilename":"README.md","_id":"cordova@3.0.7","dist":{"shasum":"b6faef3ada767f3da9c34ff7f59cb1432d44f2c5","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.7.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"bennmapes","email":"benn.mapes@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.8":{"name":"cordova","version":"3.0.8","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.10.0","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.8","dist":{"shasum":"4809e925b96956e506d7d15145cff0c680ff4af7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.8.tgz"},"_from":".","_npmVersion":"1.2.21","_npmUser":{"name":"bennmapes","email":"benn.mapes@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.9":{"name":"cordova","version":"3.0.9","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.11.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.9","dist":{"shasum":"5c3ad82c011d12d22656018af6d788635598345d","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.9.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.0.10":{"name":"cordova","version":"3.0.10","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.12.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.0.10","dist":{"shasum":"4709c8393c511a479ed2c60b3bd63b61a542a37a","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.0.10.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"shepheb","email":"braden.shepherdson@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"}],"directories":{}},"3.1.0-0.1.0":{"name":"cordova","version":"3.1.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.13.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n    \n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32. \n\n","readmeFilename":"README.md","_id":"cordova@3.1.0-0.1.0","dist":{"shasum":"8b8ec1c04130ca4df252533ed49be05b3e428d5b","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.1.0-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"}],"directories":{}},"3.1.0-0.2.0":{"name":"cordova","version":"3.1.0-0.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.14.x","plist":"0.4.x","xcode":"0.5.1","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.1.0-0.2.0","dist":{"shasum":"7fee962b7b17ea47b26e8437713edc956d01dac8","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.1.0-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-rc.1":{"name":"cordova","version":"3.2.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-rc.1","dist":{"shasum":"72561e67cb8f5fcdb9eed37cc22b38603253b333","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-rc.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.1.0":{"name":"cordova","version":"3.2.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.1.0","dist":{"shasum":"fa48dafed9b1e2dd6fba6477477423987c583cbc","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.2.0":{"name":"cordova","version":"3.2.0-0.2.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.2.0","dist":{"shasum":"22d52a4733e4f2686b7dad603c4cb53524c9ffb7","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.2.0.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"}],"directories":{}},"3.2.0-0.3.0":{"name":"cordova","version":"3.2.0-0.3.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e","win-test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.3.0","dist":{"shasum":"5ade893424a192522fada805047f52c49acb71da","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"bhiggins","email":"bryan@bryanhiggins.net"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.2.0-0.4.0":{"name":"cordova","version":"3.2.0-0.4.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.15.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Android\n- BlackBerry 10\n- iOS\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\nNote also, that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS, and you cannot build for iOS in Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both CLI and Plugman from git. Running the npm version of one and master version of the other is likely to end in suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\ncordova-cli will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command \"android list target\".  If you see:\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to update your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open visual studio to see your app live.  You are still able to use the following commands with windows8\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the .sln in the platforms/windows8 folder using Visual Studio 2012.\nNote also that Visual Studio will inform you to reload the project if you run any of the above commands while the project is loaded.\n\n","readmeFilename":"README.md","_id":"cordova@3.2.0-0.4.0","dist":{"shasum":"db7a043c69d96f316f8bb683cdcd56308cc37e1c","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.2.0-0.4.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-rc.1":{"name":"cordova","version":"3.3.0-rc.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.16.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\n    npm install -g cordova\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nTo produce a click package for a particular architecture it is necessary to run the cordova development environment on that architecture. In other words, to make a click package for an arhmf phone, the cordova toolchain needs to be installed and run on that same phone.\n\nA future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-rc.1","dist":{"shasum":"7ad9fba92da60b3be78a66520354968c07834036","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-rc.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-0.1.0":{"name":"cordova","version":"3.3.0-0.1.0","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.17.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11","lodash":"~2.4.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n> **Note: Windows Phone 7 is deprecated as a target platform. Support will be removed in version 3.7.0, approx. May 2014.**\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\nUbuntu packages are available in a PPA for Ubuntu 13.10 (Saucy) (the current release) as well as 14.04 (Trusty) (under development).\n\n    sudo apt-add-repository ppa:cordova-ubuntu/ppa\n    sudo apt-get update\n    sudo apt-get install cordova-cli\n    npm install -g cordova\n\nTo build an application for the Ubuntu platform, the following extra packages are required:\n\n    sudo apt-get install cmake debhelper libx11-dev libicu-dev pkg-config qtbase5-dev qtchooser qtdeclarative5-dev qtfeedback5-dev qtlocation5-dev qtmultimedia5-dev qtpim5-dev qtsensors5-dev qtsystems5-dev\n\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nThe initial release of cordova-ubuntu does not support building applications for armhf devices automatically. It is possible to produce applications and click packages in a few steps though.\n\nThis bug report documents the issue and solutions for it: https://bugs.launchpad.net/ubuntu/+source/cordova-ubuntu/+bug/1260500 A future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-0.1.0","dist":{"shasum":"9239f452f635a9b89b71b6db1b4a51cb1f59be93","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-0.1.0.tgz","noattachment":true},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"stevegill","email":"stevengill97@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"3.3.0-0.1.1":{"name":"cordova","version":"3.3.0-0.1.1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec e2e"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.5","plugman":"0.17.x","plist":"0.4.x","xcode":"0.6.2","express":"3.0.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.22.0","ripple-emulator":"0.9.18","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","open":"0.0.3","npm":"1.3.x","q":"~0.9","optimist":"0.6.0","jshint":"~1.1.0","mime":"~1.2.11","lodash":"~2.4.0"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"},{"name":"Andrew Grieve","email":"agrieve@chromium.org"},{"name":"Bryan Higgins","email":"bhiggins@blackberry.com"},{"name":"Don Coleman","email":"dcoleman@chariotsolutions.com"},{"name":"Germano Gabbianelli","email":"tyron.mx@gmail.com"},{"name":"Ian Clelland","email":"iclelland@chromium.org"},{"name":"Lucas Holmqust","email":"lholmqui@redhat.com"},{"name":"Matt LeGrand","email":"mlegrand@gmail.com"},{"name":"Michal Mocny","email":"mmocny@gmail.com"},{"name":"Sam Breed","email":"sam@quickleft.com"},{"name":"Tommy-Carlos Williams","email":"tommy@devgeeks.org"},{"name":"Rubén Norte","email":"rubennorte@gmail.com"},{"name":"Germano Gabbianelli","email":"tyrion.mx@gmail.com"},{"name":"Steven Gill","email":"stevengill97@gmail.com"},{"name":"Jesse","email":"purplecabbage@gmail.com"}],"license":"Apache version 2.0","readme":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Supported Cordova Platforms\n\n- Amazon Fire OS\n- Android\n- BlackBerry 10\n- iOS\n- Ubuntu\n- Windows Phone 7 &amp; 8\n- Windows 8\n\n> **Note: Windows Phone 7 is deprecated as a target platform. Support will be removed in version 3.7.0, approx. May 2014.**\n\n# Requirements\n\n* [Node.js](http://nodejs.org/)\n* SDKs for each platform you wish to support:\n  - **Android**: [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n  - [Amazon Fire OS SDK](https://developer.amazon.com/sdk/fire/IntegratingAWV.html#installawv) - **NOTE** This tool will not work unless you have Android SDK installed and paths are updated as mentioned above. In addition you need to install AmazonWebView SDK and copy awv_interface.jar to corodva-amazon-fireos/framework/libs folder. If libs folder does not exist then create one.\n  - [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n  - **BlackBerry 10**: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - **iOS**: [iOS SDK](http://developer.apple.com) with the latest `Xcode` and `Xcode Command Line Tools`\n  - **Windows Phone**: [Windows Phone SDK](http://dev.windowsphone.com/en-us/downloadsdk) - **NOTE** This tool will not work unless you have `msbuild` on your __system path__ otherwise Windows Phone support will fail (`msbuild.exe` is generally located in `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`).\n\n`cordova-cli` has been tested on **Mac OS X**, **Linux**, **Windows 7**, and **Windows 8**.\n\nPlease note that some platforms have OS restrictions.  For example, you cannot build for Windows 8 or Windows Phone 7 & 8 on Mac OS X, nor can you build for iOS on Windows.\n\n# Install\n\nUbuntu packages are available in a PPA for Ubuntu 13.10 (Saucy) (the current release) as well as 14.04 (Trusty) (under development).\n\n    sudo apt-add-repository ppa:cordova-ubuntu/ppa\n    sudo apt-get update\n    sudo apt-get install cordova-cli\n    npm install -g cordova\n\nTo build an application for the Ubuntu platform, the following extra packages are required:\n\n    sudo apt-get install cmake debhelper libx11-dev libicu-dev pkg-config qtbase5-dev qtchooser qtdeclarative5-dev qtfeedback5-dev qtlocation5-dev qtmultimedia5-dev qtpim5-dev qtsensors5-dev qtsystems5-dev\n\n\n## Installing from master\n\nYou'll need to install both [CLI](https://git-wip-us.apache.org/repos/asf/cordova-cli.git) and [Plugman](https://git-wip-us.apache.org/repos/asf/cordova-plugman.git) from `git`. Running the *npm version* of one and *(git) master version* of the other is likely to end with you suffering.\n\nTo avoid using sudo, see [Get away from sudo: npm without root](http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears).\n\nRun the following commands:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n    cd ..\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-cli.git\n    cd cordova-cli\n    npm install\n    sudo npm link\n    npm link plugman\n\nNow the `cordova` and `plugman` in your path are the local git versions. Don't forget to keep them up to date!\n\n## Installing on Ubuntu\n\n    apt-get install cordova-cli\n\n\n# Getting Started\n\n`cordova-cli` has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Commands\n\n- `help` display a help page with all available commands\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms for which the project will build\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platform build targets from the project\n- `platform [up | update] <platform> ` - updates the Cordova version used for the given platform\n- `plugin [ls | list]` list all plugins included in the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) plugins from the project.\n- `plugin search [<keyword1> <keyword2> ...]` search the plugin registry for plugins matching the list of keywords\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. It is then ready for building by `Eclipse`, `Xcode`, etc.\n- `compile [platform...]` compiles the app into a binary for each targetted platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve [port]` launch a local web server allowing you to access each  platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming `cordova-cli` as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your `cordova-cli` install.\n\n# Project Directory Structure\nA Cordova application built with `cordova-cli` will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry10/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry10/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find this project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as `git`).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n- The entry/start page for your application can be defined via the `<content src>` element + attribute.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger **Node** application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your Node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build\n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and their versions. Related to this: which `Xcode` version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n\n\n# Known Issues and Troubleshooting\n\n## Any OS\n\n### Proxy Settings\n\n`cordova-cli` will use `npm`'s proxy settings. If you downloaded cordova-cli via `npm` and are behind a proxy, chances are cordova-cli should work for you as it will use those settings in the first place. Make sure that the `https-proxy` and `proxy` npm config variables are set properly. See [npm's configuration documentation](https://npmjs.org/doc/config.html) for more information.\n\n## Windows\n\n### Trouble Adding Android as a Platform\n\nWhen trying to add a platform on a Windows machine if you run into the following error message:\n    cordova library for \"android\" already exists. No need to download. Continuing.\n    Checking if platform \"android\" passes minimum requirements...\n    Checking Android requirements...\n    Running \"android list target\" (output to follow)\n\n    Error: The command `android` failed. Make sure you have the latest Android SDK installed, and the `android` command (inside the tools/ folder) added t\n    o your path. Output:\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\platform.js:185:42\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\src\\metadata\\android_parser.js:50:13\n    at C:\\Users\\me\\AppData\\Roaming\\npm\\node_modules\\cordova\\node_modules\\shelljs\\shell.js:1707:7\n    at exithandler (child_process.js:633:7)\n    at ChildProcess.errorhandler (child_process.js:649:5)\n    at ChildProcess.EventEmitter.emit (events.js:95:17)\n    at Process.ChildProcess._handle.onexit (child_process.js:787:12)\n\nrun the command `android list target`.  If you see:\n\n    'xcopy' is not recognized as an internal or external command,\n    operable program or batch file.\n\nat the beginning of the command output, it means you will need to fix your Windows Path variable to include xcopy. This location is typically under C:\\Windows\\System32.\n\n## Windows 8\n\nWindows 8 support does not include the ability to launch/run/emulate, so you will need to open **Visual Studio** to see your app live.  You are still able to use the following commands with windows8:\n\n- `platform add windows8`\n- `platform remove windows8`\n- `prepare windows8`\n- `compile windows8`\n- `build windows8`\n\nTo run your app, you will need to open the `.sln` in the `platforms/windows8` folder using **Visual Studio 2012**.\n\n**Visual Studio** will tell you to reload the project if you run any of the above commands while the project is loaded.\n\n## Amazon Fire OS\n\nAmazon Fire OS does not include the ability to emulate. You are still able to use the following commands with Amazon Fire OS\n\n- `platform add amazon-fireos`\n- `platform remove amazon-fireos`\n- `prepare amazon-fireos`\n- `compile amazon-fireos`\n- `build amazon-fireos`\n\n## Ubuntu\n\nThe initial release of cordova-ubuntu does not support building applications for armhf devices automatically. It is possible to produce applications and click packages in a few steps though.\n\nThis bug report documents the issue and solutions for it: https://bugs.launchpad.net/ubuntu/+source/cordova-ubuntu/+bug/1260500 A future release will let developers cross-compile armhf click packages directly from an x86 desktop.\n","readmeFilename":"README.md","_id":"cordova@3.3.0-0.1.1","dist":{"shasum":"142d353de922f3d1efe1b04b1b7c908905f660fe","tarball":"http://registry.npmjs.org/cordova/-/cordova-3.3.0-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.23","_npmUser":{"name":"agrieve","email":"agrieve@chromium.org"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"directories":{}},"2.9.0-rc1":{"name":"cordova","version":"2.9.0-rc1","preferGlobal":"true","description":"Cordova command line interface tool","main":"cordova","engines":{"node":">=0.9.9"},"engineStrict":true,"bin":{"cordova":"./bin/cordova"},"scripts":{"test":"jasmine-node --color spec"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"bugs":{"url":"https://issues.apache.org/jira/browse/CB","email":"dev@cordova.apache.org"},"keywords":["cordova","client","cli"],"dependencies":{"colors":">=0.6.0","elementtree":"0.1.3","plugman":"0.7.14","plist":"0.4.x","xcode":"0.5.1","express":"3.0","shelljs":"0.1.2","ncallbacks":"1.0.0","request":"2.12.x","semver":"1.1.0","glob":"3.2.x","follow-redirects":"0.0.x","prompt":"0.2.7","tar":"0.1.x","ripple-emulator":">=0.9.15","open":"0.0.3"},"devDependencies":{"jasmine-node":"1.8.x"},"author":{"name":"Anis Kadri"},"contributors":[{"name":"Brian LeRoux","email":"b@brian.io"},{"name":"Fil Maj","email":"maj.fil@gmail.com"},{"name":"Mike Reinstein","email":"reinstein.mike@gmail.com"},{"name":"Darry Pogue","email":"darryl@dpogue.ca"},{"name":"Michael Brooks","email":"michael@michaelbrooks.ca"},{"name":"Braden Shepherdson","email":"braden@chromium.org"},{"name":"Gord Tanner","email":"gtanner@gmail.com"},{"name":"Tim Kim","email":"timk@adobe.com"},{"name":"Benn Mapes","email":"Benn.Mapes@gmail.com"},{"name":"Michael Wolf","email":"Michael.Wolf@Cynergy.com"}],"license":"Apache version 2.0","readme":"# cordova-cli\n\n> The command line tool to build, deploy and manage [Cordova](http://cordova.io)-based applications.\n\n[Apache Cordova](http://cordova.io) allows for building native mobile applications using HTML, CSS and JavaScript. This tool helps with management of multi-platform Cordova applications as well as Cordova plugin integration.\n\nCheck out the [Getting Started guides](http://cordova.apache.org/docs/en/edge/guide_getting-started_index.md.html#Getting%20Started%20Guides) for more details on how to work with Cordova sub-projects.\n\n# Requirements\n\n* [nodejs](http://nodejs.org/)\n* SDKs for every platform you wish to support\n  - BlackBerry 10: [BlackBerry 10 WebWorks SDK](http://developer.blackberry.com/html5/download/). Make sure you have the `dependencies/tools/bin` folder inside the SDK directory added to your path!\n  - iOS: [iOS SDK](http://developer.apple.com) with the latest Xcode and Xcode Command Line Tools\n  - [Android SDK](http://developer.android.com) - **NOTE** This tool\n    will not work unless you have the absolute latest updates for all\n    Android SDK components. Also you will need the SDK's `tools` and `platform-tools` directories on your __system path__ otherwise Android support will fail.\n\ncordova-cli has been tested on Mas OS X, Linux, Windows 7 and Windows 8.\n\n# Install\n\n    npm install -g cordova\n\n# Getting Started\n\ncordova-cli has a single global `create` command that creates new cordova projects into a specified directory. Once you create a project, `cd` into it and you can execute a variety of project-level commands. Completely inspired by git's interface.\n\n## Global Command\n\n- `create <directory> [<id> [<name>]]` create a new cordova project with optional name and id (package name, reverse-domain style)\n\n<a name=\"project_commands\" />\n## Project Commands\n\n- `platform [ls | list]` list all platforms the project will build to\n- `platform add <platform> [<platform> ...]` add one (or more) platforms as a build target for the project\n- `platform [rm | remove] <platform> [<platform> ...]` removes one (or more) platforms as a build target for the project\n- `plugin [ls | list]` list all plugins added to the project\n- `plugin add <path-to-plugin> [<path-to-plugin> ...]` add one (or more) plugins to the project\n- `plugin [rm | remove] <plugin-name> [<plugin-name> ...]` remove one (or more) added plugins\n- `prepare [platform...]` copies files into the specified platforms, or all platforms. it is then ready for building by Eclipse/Xcode/etc.\n- `compile [platform...]` compiles the app into a binary for each added platform. With no parameters, builds for all platforms, otherwise builds for the specified platforms.\n- `build [<platform> [<platform> [...]]]` an alias for `cordova prepare` followed by `cordova compile`\n- `emulate [<platform> [<platform> [...]]]` launch emulators and deploy app to them. With no parameters emulates for all platforms added to the project, otherwise emulates for the specified platforms\n- `serve <platform> [port]` launch a local web server for that platform's www directory on the given port (default 8000).\n\n### Optional Flags\n\n- `-d` or `--verbose` will pipe out more verbose output to your shell. You can also subscribe to `log` and `warn` events if you are consuming cordova-cli as a node module by calling `cordova.on('log', function() {})` or `cordova.on('warn', function() {})`.\n- `-v` or `--version` will print out the version of your cordova-cli install.\n\n# Project Directory Structure\nA Cordova application built with cordova-cli will have the following directory structure:\n\n    myApp/\n    |--.cordova/\n    |-- merges/\n    | | |-- android/\n    | | |-- blackberry/\n    | | `-- ios/\n    |-- www/\n    | `-- config.xml\n    |-- platforms/\n    | |-- android/\n    | |-- blackberry/\n    | `-- ios/\n    `-- plugins/\n\n## .cordova/\nThis directory identifies a tree as a cordova project. Simple configuration information is stored in here (such as BlackBerry environment variables).\n\nCommands other than `create` operate against the project directory itself, rather than the current directory - a search up the current directory's parents is made to find the project directory. Thus, any command (other than `create`) can be used from any subdirectory whose parent is a cordova project directory (same as git).\n\n## merges/\nPlatform-specific web assets (HTML, CSS and JavaScript files) are contained within appropriate subfolders in this directory. These are deployed during a `prepare` to the appropriate native directory.  Files placed under `merges/` will override matching files in the `www/` folder for the relevant platform. A quick example, assuming a project structure of:\n\n    merges/\n    |-- ios/\n    | `-- app.js\n    |-- android/\n    | `-- android.js\n    www/\n    `-- app.js\n\nAfter building the Android and iOS projects, the Android application will contain both `app.js` and `android.js`. However, the iOS application will only contain an `app.js`, and it will be the one from `merges/ios/app.js`, overriding the \"common\" `app.js` located inside `www/`.\n\n## www/\n\nContains the project's web artifacts, such as .html, .css and .js files. These are your main application assets. They will be copied on a `cordova prepare` to each platform's www directory.\n\n### Your Blanket: config.xml\n\nThis file is what you should be editing to modify your application's metadata. Any time you run any cordova-cli commands, the tool will look at the contents of `config.xml` and use all relevant info from this file to define native application information. cordova-cli supports changing your application's data via the following elements inside the `config.xml` file:\n\n- The user-facing name can be modified via the contents of the `<name>` element.\n- The package name (AKA bundle identifier or application id) can be modified via the `id` attribute from the top-level `<widget>` element.\n- The version can be modified via the `version` attribute from the top-level `<widget>` element.\n- The whitelist can be modified using the `<access>` elements. Make sure the `origin` attribute of your `<access>` element points to a valid URL (you can use `*` as wildcard). For more information on the whitelisting syntax, see the [docs.phonegap.com](http://docs.phonegap.com/en/2.2.0/guide_whitelist_index.md.html#Domain%20Whitelist%20Guide). You can use either attribute `uri` ([BlackBerry-proprietary](https://developer.blackberry.com/html5/documentation/access_element_834677_11.html)) or `origin` ([standards-compliant](http://www.w3.org/TR/widgets-access/#attributes)) to denote the domain.\n- Platform-specific preferences can be customized via `<preference>` tags. See [docs.phonegap.com](http://docs.phonegap.com/en/2.3.0/guide_project-settings_index.md.html#Project%20Settings) for a list of preferences you can use.\n\n## platforms/\nPlatforms added to your application will have the native application project structures laid out within this directory.\n\n## plugins/\nAny added plugins will be extracted or copied into this directory.\n\n# Hooks\n\nProjects created by cordova-cli have `before` and `after` hooks for each [project command](#project_commands).\n\nThere are two types of hooks: project-specific ones and module-level ones. Both of these types of hooks receive the project root folder as a parameter.\n\n## Project-specific Hooks\n\nThese are located under the `.cordova/hooks` directory in the root of your cordova project. Any scripts you add to these directories will be executed before and after the appropriate commands. Useful for integrating your own build systems or integrating with version control systems. __Remember__: make your scripts executable.\n\n### Examples\n\n- [`before_build` hook for jade template compiling](https://gist.github.com/4100866) courtesy of [dpogue](http://github.com/dpogue)\n\n## Module-level Hooks\n\nIf you are using cordova-cli as a module within a larger node application, you can also use the standard `EventEmitter` methods to attach to the events. The events include `before_build`, `before_compile`, `before_docs`, `before_emulate`, `before_run`, `before_platform_add`, `before_library_download`, `before_platform_ls`, `before_platform_rm`, `before_plugin_add`, `before_plugin_ls`, `before_plugin_rm` and `before_prepare`. There is also a `library_download` progress event. Additionally, there are `after_` flavours of all the above events.\n\nOnce you `require('cordova')` in your node project, you will have the usual `EventEmitter` methods available (`on`, `off` or `removeListener`, `removeAllListeners`, and `emit` or `trigger`).\n\n# Examples\n\n## Creating a new cordova project\nThis example shows how to create a project from scratch named KewlApp with iOS and Android platform support, and includes a plugin named Kewlio. The project will live in ~/KewlApp\n\n    cordova create ~/KewlApp KewlApp\n    cd ~/KewlApp\n    cordova platform add ios android\n    cordova plugin add http://example.org/Kewlio-1.2.3.tar.gz\n    cordova build \n\nThe directory structure of KewlApp now looks like this:\n\n    KewlApp/\n    |-- .cordova/\n    |-- merges/\n    | |-- android/\n    | `-- ios/\n    |-- www/\n    | `-- index.html\n    |-- platforms/\n    | |-- android/\n    | | `-- …\n    | `-- ios/\n    |   `-- …\n    `-- plugins/\n      `-- Kewlio/\n\n# Contributing\n\n## Running Tests\n\n    npm test\n\n## TO-DO + Issues\n\nPlease check [Cordova issues with the CLI Component](http://issues.cordova.io). If you find issues with this tool, please be so kind as to include relevant information needed to debug issues such as:\n\n- Your operating system and version\n- The application name, directory location, and identifier used with `create`\n- Which mobile SDKs you have installed, and which version. Related to this: which Xcode version if you are submitting issues related to iOS\n- Any error stack traces you received\n\n## Contributors\n\nThanks to everyone for contributing! For a list of people involved, please see the `package.json` file.\n","readmeFilename":"README.md","_id":"cordova@2.9.0-rc1","dist":{"shasum":"bc9d89a9f91aa92b66419c9d25a32c5224f362b0","tarball":"http://registry.npmjs.org/cordova/-/cordova-2.9.0rc1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"filmaj","email":"maj.fil@gmail.com"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"}],"directories":{}}},"readme":"cordova-client\n==============\n\nCordova client allows you to create, build and emulate Cordova projects.\n\nCordova client uses the platform specific scripts for creating, building and emulating projects. Your projects have to be created using either the platform specific create script or the cordova client master script.\n\nCordova client supports iOS and Android for now. More platforms will be added soon!\n\nCordova client requires:\n\n- [nodejs](http://nodejs.org/)\n- [iOS SDK](http://developer.apple.com)\n- [Android SDK](http://developer.android.com)\n\nCordova client has been tested on Windows, Linux and Mas OS X.\n\n\nUsing cordova client\n====================\n\nCreating projects\n-----------------\n\n    cordova create [[platform:[directory]:[package_name]:[project_name]] [platform:[directory]:[package_name]:[project_name]]...|cordova.conf]\n<!-- -->\n\n- directory: path to your new Cordova based project\n- package_name: following reverse-domain style convention\n- project_name: Cordova based project name\n\nWhen called with no arguments _cordova create_ will generate an _cordova-ios-example_ and _cordova-android-example_ in the current directory\n\ncordova.conf format\n-------------------\n\ncordova.conf should be formatted this way:\n\n    platform directory package_name project_name\n    platform directory package_name project_name\n\nDefault cordova.conf:\n\n    ios ~/Projects/ios-example com.example.cordovaexample CordovaExample\n    android ~/Projects/android-example com.example.cordovaexample CordovaExample\n\nBuilding projects\n-----------------\n\n    cordova build [[directory] [directory]...|cordova.conf]\n\nYou can call _cordova build_ with no arguments if you are inside a cordova based project. _cordova build_ will just call the _./cordova/debug_ script.\n\n\nEmulating projects\n------------------\n\n    cordova emulate [directory] [directory]...|cordova.conf\n\nWill launch the platform's emulator\n\n\nExamples:\n=========\n\nCreating a sample iOS and android project\n-----------------------------------------\n\n    cordova create\n\nthis will generate two projects in the current directory: _ios-example_ and _android-example_\n\nCreating a sample iOS project and android project with specific arguments\n-------------------------------------------------------------------------\n    \n    cordova create ios:./my-ios-project:com.example.myiospackage:CordovaExample android:./my-android-project:com.example.myandroidpackage:CordovaActivity\n\nBuilding projects (platform does not matter)\n--------------------------------------------\n\n    cordova build ./ios-example ./android-example\n\nEmulating projects (platform does not matter)\n--------------------------------------------\n\n    cordova emulate ./ios-example ./android-example\n","maintainers":[{"name":"brianleroux","email":"b@brian.io"},{"name":"filmaj","email":"maj.fil@gmail.com"},{"name":"shepheb","email":"braden.shepherdson@gmail.com"},{"name":"mwbrooks","email":"michael@michaelbrooks.ca"},{"name":"anis","email":"anis.kadri@gmail.com"},{"name":"mmocny","email":"mmocny@gmail.com"},{"name":"bennmapes","email":"benn.mapes@gmail.com"},{"name":"stevegill","email":"stevengill97@gmail.com"},{"name":"agrieve","email":"agrieve@chromium.org"},{"name":"bhiggins","email":"bryan@bryanhiggins.net"}],"time":{"0.0.1":"2012-07-14T22:05:41.616Z","0.0.2":"2012-07-15T05:02:00.717Z","0.0.3":"2012-09-12T20:58:00.058Z","0.0.4":"2012-09-23T18:20:25.366Z","0.0.5":"2012-09-24T18:56:37.334Z","0.0.6":"2012-09-26T00:10:41.285Z","0.0.7":"2012-09-26T20:50:22.939Z","0.0.8":"2012-10-01T06:52:58.870Z","0.0.9":"2012-10-03T18:55:08.227Z","0.1.0":"2012-10-04T07:41:58.699Z","0.1.1":"2012-10-05T16:28:22.754Z","0.1.2":"2012-10-06T01:52:29.094Z","0.1.3":"2012-10-09T23:13:22.562Z","0.1.4":"2012-10-10T22:15:39.867Z","0.1.5":"2012-10-18T20:24:07.129Z","0.1.6":"2012-10-22T22:40:18.181Z","0.1.7":"2012-10-24T23:37:01.234Z","0.1.8":"2012-10-25T00:28:13.591Z","0.1.9":"2012-11-01T22:25:21.228Z","0.1.10":"2012-11-06T21:03:20.275Z","0.1.11":"2012-11-20T20:09:30.018Z","0.1.12":"2012-11-21T05:46:55.847Z","0.1.13":"2012-11-21T22:09:36.206Z","0.1.14":"2012-11-28T20:03:16.085Z","2.2.0":"2012-12-17T19:48:26.342Z","2.3.0":"2013-01-09T22:59:40.049Z","2.3.1":"2013-01-09T23:30:05.415Z","2.3.2":"2013-01-10T00:56:58.029Z","2.3.3":"2013-01-10T21:25:17.650Z","2.3.5":"2013-01-18T00:02:35.220Z","2.3.6":"2013-01-18T21:11:02.032Z","2.4.0":"2013-01-22T01:56:56.019Z","2.4.1":"2013-01-24T19:20:30.713Z","2.4.2":"2013-01-24T20:10:14.654Z","2.4.3":"2013-02-05T01:08:52.753Z","2.4.4":"2013-02-06T19:05:50.866Z","2.4.5":"2013-02-08T22:17:09.483Z","2.4.6":"2013-02-08T23:01:55.008Z","2.4.7":"2013-02-15T20:25:03.641Z","2.4.8":"2013-02-15T22:10:30.026Z","2.4.9":"2013-02-16T01:28:08.790Z","2.4.10":"2013-02-19T18:40:07.620Z","2.5.0":"2013-02-21T19:45:27.417Z","2.5.2":"2013-03-05T00:22:08.301Z","2.5.3":"2013-03-06T22:50:38.581Z","2.5.4":"2013-03-07T19:50:18.270Z","2.5.5":"2013-03-13T19:59:52.826Z","2.6.0":"2013-03-25T21:54:51.633Z","2.6.1":"2013-04-17T22:42:43.219Z","2.6.2":"2013-04-17T22:53:42.013Z","2.7.0-rc.1":"2013-04-24T22:00:16.583Z","2.7.1-rc.1":"2013-04-25T00:46:18.098Z","2.7.2":"2013-04-30T21:06:38.503Z","2.7.3":"2013-05-15T20:55:30.104Z","2.7.4":"2013-05-22T22:40:52.670Z","2.8.0":"2013-06-03T22:33:54.295Z","2.8.1":"2013-06-04T00:13:38.655Z","2.8.2":"2013-06-04T15:47:44.450Z","2.8.3":"2013-06-05T00:27:27.990Z","2.8.4":"2013-06-05T15:22:03.496Z","2.8.5":"2013-06-05T18:56:46.348Z","2.8.6":"2013-06-05T19:20:09.457Z","2.8.7":"2013-06-05T19:38:16.964Z","2.8.8":"2013-06-05T21:43:09.248Z","2.8.9":"2013-06-05T22:14:29.025Z","2.8.10":"2013-06-06T19:29:25.142Z","2.8.11":"2013-06-07T01:06:24.526Z","2.8.12":"2013-06-07T01:12:36.511Z","2.8.13":"2013-06-07T07:34:43.411Z","2.8.14":"2013-06-10T18:47:26.009Z","2.8.15":"2013-06-12T17:14:08.217Z","2.8.16":"2013-06-13T18:26:22.915Z","2.8.17":"2013-06-13T19:02:11.386Z","2.8.18":"2013-06-14T20:24:59.897Z","2.8.19":"2013-06-14T21:05:03.129Z","2.8.20":"2013-06-18T21:35:14.772Z","2.8.21":"2013-06-18T22:25:18.635Z","2.8.22":"2013-06-19T20:30:02.207Z","2.8.23":"2013-06-20T00:44:24.765Z","2.8.24":"2013-06-20T16:29:44.973Z","2.8.25":"2013-06-20T18:35:48.361Z","2.9.0":"2013-06-26T22:52:18.958Z","2.9.1":"2013-07-03T18:44:49.068Z","2.9.2":"2013-07-09T06:58:44.985Z","2.9.3":"2013-07-12T02:15:47.959Z","2.9.4":"2013-07-12T03:58:43.203Z","2.9.5":"2013-07-12T18:56:02.185Z","2.9.6":"2013-07-16T00:25:41.753Z","2.9.7":"2013-07-16T19:14:29.605Z","3.0.0-rc1":"2013-07-16T23:04:53.695Z","3.0.0-rc1-1":"2013-07-17T16:50:05.631Z","3.0.0-rc1-3":"2013-07-18T20:49:08.657Z","3.0.0":"2013-07-19T16:08:57.240Z","3.0.1":"2013-07-24T22:55:06.338Z","3.0.2":"2013-07-29T00:34:50.407Z","3.0.3":"2013-07-29T01:06:52.697Z","3.0.4":"2013-07-31T17:39:03.446Z","3.0.5":"2013-08-12T20:59:29.645Z","3.0.6":"2013-08-12T22:14:04.960Z","3.0.7":"2013-08-27T18:00:00.406Z","3.0.8":"2013-08-28T23:02:38.414Z","3.0.9":"2013-09-05T19:30:52.643Z","3.0.10":"2013-09-20T22:25:25.167Z","3.1.0-0.1.0":"2013-10-02T18:17:38.648Z","3.1.0-0.2.0":"2013-10-29T18:38:39.703Z","3.2.0-rc.1":"2013-11-12T22:03:28.078Z","3.2.0-0.1.0":"2013-11-23T00:15:02.722Z","3.2.0-0.2.0":"2013-11-27T19:52:25.400Z","3.2.0-0.3.0":"2013-11-29T18:54:58.606Z","3.2.0-0.4.0":"2013-12-04T23:40:03.031Z","3.3.0-rc.1":"2013-12-06T21:21:30.677Z","3.3.0-0.1.0":"2013-12-12T23:26:54.542Z","3.3.0-0.1.1":"2013-12-13T20:00:05.656Z","2.9.0-rc1":"2013-06-20T21:46:36.330Z"},"author":{"name":"Anis Kadri"},"repository":{"type":"git","url":"https://git-wip-us.apache.org/repos/asf/cordova-cli.git"},"_attachments":{"cordova-3.3.0-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":253,"digest":"md5-tZqiqTtG0wbIJm3oOxYHww==","length":172497,"stub":true},"cordova-3.3.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":247,"digest":"md5-zfA7wVXEZ5tFdgq/xHxAJA==","length":764420,"stub":true},"cordova-3.2.0-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":245,"digest":"md5-OoPmooAnLkhzhIbuqYezCg==","length":168664,"stub":true},"cordova-3.2.0-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":243,"digest":"md5-AHTLcDBlYThVvg1pQcZ00A==","length":1502674,"stub":true},"cordova-3.2.0-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":240,"digest":"md5-A7r06/GX5E8mqDDdZrEang==","length":63778,"stub":true},"cordova-3.2.0-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":238,"digest":"md5-sny500YaqhY2h5cbD9wPjA==","length":195835,"stub":true},"cordova-3.2.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":235,"digest":"md5-VrLqExGqpQj1BD25ETTsug==","length":62409,"stub":true},"cordova-3.1.0-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":233,"digest":"md5-IKyiLXeq1HAmA5mZS1U9Dg==","length":61027,"stub":true},"cordova-3.1.0-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":230,"digest":"md5-b2YGIexo8if0OqqkyobteQ==","length":54541,"stub":true},"cordova-3.0.10.tgz":{"content_type":"application/octet-stream","revpos":226,"digest":"md5-rvN8RM06iZ84o5jj0p95zQ==","length":53344,"stub":true},"cordova-3.0.9.tgz":{"content_type":"application/octet-stream","revpos":224,"digest":"md5-eEEWzI8SUSwsmkWCoOlLAw==","length":50708,"stub":true},"cordova-3.0.8.tgz":{"content_type":"application/octet-stream","revpos":222,"digest":"md5-AjHgh9LbCsD+b1HvpY3eXA==","length":49937,"stub":true},"cordova-3.0.7.tgz":{"content_type":"application/octet-stream","revpos":220,"digest":"md5-QnQRizYxnKTSFtUrdM9l2g==","length":50016,"stub":true},"cordova-3.0.6.tgz":{"content_type":"application/octet-stream","revpos":216,"digest":"md5-0+XuOof2jiPt/Tjd1Y5+dQ==","length":47537,"stub":true},"cordova-3.0.5.tgz":{"content_type":"application/octet-stream","revpos":214,"digest":"md5-4iAXxA0DpXKJJvFMxyHF6A==","length":47518,"stub":true},"cordova-3.0.4.tgz":{"content_type":"application/octet-stream","revpos":212,"digest":"md5-zuj/MKoQsyUg/seJXZrzmw==","length":45381,"stub":true},"cordova-3.0.3.tgz":{"content_type":"application/octet-stream","revpos":210,"digest":"md5-MpLKbUtsE1GUMDcjCYThrQ==","length":43939,"stub":true},"cordova-3.0.2.tgz":{"content_type":"application/octet-stream","revpos":208,"digest":"md5-TIJ8su988qA4QattfAYNdw==","length":43942,"stub":true},"cordova-3.0.1.tgz":{"content_type":"application/octet-stream","revpos":205,"digest":"md5-wQoXFAA7KKm3yVNw3k3dDg==","length":43525,"stub":true},"cordova-3.0.0.tgz":{"content_type":"application/octet-stream","revpos":203,"digest":"md5-ySWYw71cOuZUNA+BaPGuAg==","length":43013,"stub":true},"cordova-3.0.0rc1-3.tgz":{"content_type":"application/octet-stream","revpos":201,"digest":"md5-EDWNHp7LaD801tt4TleKUg==","length":43015,"stub":true},"cordova-3.0.0rc1-1.tgz":{"content_type":"application/octet-stream","revpos":199,"digest":"md5-XgYidnxOA8xvsdiMiejVRg==","length":42580,"stub":true},"cordova-3.0.0rc1.tgz":{"content_type":"application/octet-stream","revpos":197,"digest":"md5-mrO4xJjd7lftWrXibLVm+A==","length":42583,"stub":true},"cordova-2.9.7.tgz":{"content_type":"application/octet-stream","revpos":195,"digest":"md5-EnkijyssnqXnP/YbZ+MaFw==","length":43272,"stub":true},"cordova-2.9.6.tgz":{"content_type":"application/octet-stream","revpos":193,"digest":"md5-NQEh23RNVJF8KqEXxk9wkA==","length":43238,"stub":true},"cordova-2.9.5.tgz":{"content_type":"application/octet-stream","revpos":191,"digest":"md5-04zRkO8bIktqIhQ8LL8Qrw==","length":43115,"stub":true},"cordova-2.9.4.tgz":{"content_type":"application/octet-stream","revpos":189,"digest":"md5-lOEcHxTAyTbRP+od+FWJgg==","length":43045,"stub":true},"cordova-2.9.3.tgz":{"content_type":"application/octet-stream","revpos":187,"digest":"md5-ZPuPoO6S3WDDCscMcUWUPQ==","length":42951,"stub":true},"cordova-2.9.2.tgz":{"content_type":"application/octet-stream","revpos":185,"digest":"md5-QJRcuNo/0aSVV4Bkx5GmVA==","length":43163,"stub":true},"cordova-2.9.1.tgz":{"content_type":"application/octet-stream","revpos":183,"digest":"md5-ckK5UzrHecv1pQus5/1mpA==","length":43268,"stub":true},"cordova-2.9.0.tgz":{"content_type":"application/octet-stream","revpos":177,"digest":"md5-dDSYjzV/SN78/q3Oq7f8YQ==","length":44299,"stub":true},"cordova-2.9.0rc1.tgz":{"content_type":"application/octet-stream","revpos":175,"digest":"md5-rQsWZlk+2YAMRJECL3hWSw==","length":44165,"stub":true},"cordova-2.8.25.tgz":{"content_type":"application/octet-stream","revpos":173,"digest":"md5-bvFNQ4BToZ8FMD7R687zYw==","length":44305,"stub":true},"cordova-2.8.24.tgz":{"content_type":"application/octet-stream","revpos":171,"digest":"md5-yeRrnLyhX9JmjKv4/jubQg==","length":43108,"stub":true},"cordova-2.8.23.tgz":{"content_type":"application/octet-stream","revpos":169,"digest":"md5-07534Vp3wrzNeepn/fTsUQ==","length":42578,"stub":true},"cordova-2.8.22.tgz":{"content_type":"application/octet-stream","revpos":167,"digest":"md5-C1Tb7cenQjyXbVCwFecLUA==","length":43456,"stub":true},"cordova-2.8.21.tgz":{"content_type":"application/octet-stream","revpos":165,"digest":"md5-fOLWFVsgDL5+g+MJ6x7Iug==","length":43426,"stub":true},"cordova-2.8.20.tgz":{"content_type":"application/octet-stream","revpos":163,"digest":"md5-UNziMEQ2WKDBXzvDKdVHvw==","length":43601,"stub":true},"cordova-2.8.19.tgz":{"content_type":"application/octet-stream","revpos":161,"digest":"md5-fOUrYHi4hFKhcLqB9BzfhQ==","length":43063,"stub":true},"cordova-2.8.18.tgz":{"content_type":"application/octet-stream","revpos":159,"digest":"md5-5fVkgiBgbL9JMfclsWe6mg==","length":42992,"stub":true},"cordova-2.8.17.tgz":{"content_type":"application/octet-stream","revpos":157,"digest":"md5-EvbbPlhCT9G9HnVve+oyjA==","length":41750,"stub":true},"cordova-2.8.16.tgz":{"content_type":"application/octet-stream","revpos":155,"digest":"md5-lGlKYSwQcF+Uz0l7Lc/hnw==","length":41526,"stub":true},"cordova-2.8.15.tgz":{"content_type":"application/octet-stream","revpos":153,"digest":"md5-Na3s+04Scy9FBRIRjL8+sw==","length":20229103,"stub":true},"cordova-2.8.14.tgz":{"content_type":"application/octet-stream","revpos":151,"digest":"md5-WB2SqXrOxFYAfTpF7zhQQQ==","length":66854285,"stub":true},"cordova-2.8.13.tgz":{"content_type":"application/octet-stream","revpos":149,"digest":"md5-opAX7Zbf8IA2mULrb+2bpg==","length":66854319,"stub":true},"cordova-2.8.12.tgz":{"content_type":"application/octet-stream","revpos":147,"digest":"md5-uJq0ZaxhfKElApfEbsQgAg==","length":65498029,"stub":true},"cordova-2.8.11.tgz":{"content_type":"application/octet-stream","revpos":145,"digest":"md5-wHimVFEmIfKvMeCbqGNq3w==","length":65498038,"stub":true},"cordova-2.8.10.tgz":{"content_type":"application/octet-stream","revpos":143,"digest":"md5-Yj8xYr6Nnu/M93xb2jg10g==","length":65496453,"stub":true},"cordova-2.8.9.tgz":{"content_type":"application/octet-stream","revpos":141,"digest":"md5-Pu3huUWucu949Mvaal6cJw==","length":52764414,"stub":true},"cordova-2.8.8.tgz":{"content_type":"application/octet-stream","revpos":139,"digest":"md5-xfWTjaLBg2aGTBQBqvphKg==","length":52764331,"stub":true},"cordova-2.8.7.tgz":{"content_type":"application/octet-stream","revpos":137,"digest":"md5-qg0+34w9a7TQj2dyAM3UXw==","length":52764968,"stub":true},"cordova-2.8.6.tgz":{"content_type":"application/octet-stream","revpos":135,"digest":"md5-dHVdGF4heOQh1hjTpbnKbQ==","length":52764921,"stub":true},"cordova-2.8.5.tgz":{"content_type":"application/octet-stream","revpos":133,"digest":"md5-XyZlQCVYT4ZQ8zkgwtlo4g==","length":52764886,"stub":true},"cordova-2.8.4.tgz":{"content_type":"application/octet-stream","revpos":131,"digest":"md5-bWDOUvX5sqFxNFkMrNx0Tg==","length":52765133,"stub":true},"cordova-2.8.3.tgz":{"content_type":"application/octet-stream","revpos":129,"digest":"md5-vLRM9tbDv3W7OeC7ie6Bhw==","length":52765155,"stub":true},"cordova-2.8.2.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-XYJPuYAUMYxZ4D+lrlvxBQ==","length":52765683,"stub":true},"cordova-2.8.1.tgz":{"content_type":"application/octet-stream","revpos":125,"digest":"md5-RuY+UnoTAukXz+sfOkW/cw==","length":52748059,"stub":true},"cordova-2.8.0.tgz":{"content_type":"application/octet-stream","revpos":123,"digest":"md5-1lwro9KnowAWysIygq+ILA==","length":52747964,"stub":true},"cordova-2.7.4.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-W2wrrT7Hd+hExOpPUOOUow==","length":19293871,"stub":true},"cordova-2.7.3.tgz":{"content_type":"application/octet-stream","revpos":120,"digest":"md5-vWyxv/5TtGVt8qRchrr/UA==","length":19298253,"stub":true},"cordova-2.7.2.tgz":{"content_type":"application/octet-stream","revpos":118,"digest":"md5-C0KRJ8WovmfSwUMMNs86vQ==","length":18117382,"stub":true},"cordova-2.7.1-rc.1.tgz":{"content_type":"application/octet-stream","revpos":116,"digest":"md5-AMrQFV3/OjStF/phkg4Z4A==","length":17242909,"stub":true},"cordova-2.7.0-rc.1.tgz":{"content_type":"application/octet-stream","revpos":114,"digest":"md5-dpMT2clN38qC8f4xXcFyPg==","length":17243071,"stub":true},"cordova-2.6.2.tgz":{"content_type":"application/octet-stream","revpos":112,"digest":"md5-0GDob5uyd2CZkuErD+gUCg==","length":18069582,"stub":true},"cordova-2.6.1.tgz":{"content_type":"application/octet-stream","revpos":110,"digest":"md5-sLFd08vLxmFrYmiDEXCp9g==","length":18069117,"stub":true},"cordova-2.6.0.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-LoZwgxXH19wtfWHGw2OHSw==","length":18066986,"stub":true},"cordova-2.5.5.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-MRu8RWZYkbv3e8dUKa0X5g==","length":18005388,"stub":true},"cordova-2.5.4.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-t3Qx9lARA25kkgW5y/8Qfg==","length":18005364,"stub":true},"cordova-2.5.3.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-xozeq+NXmFgCnvw4GDdUTA==","length":36019838,"stub":true},"cordova-2.5.2.tgz":{"content_type":"application/octet-stream","revpos":99,"digest":"md5-RFGM73FPJp/HbuPcUWarwA==","length":66331190,"stub":true},"cordova-2.5.0.tgz":{"content_type":"application/octet-stream","revpos":97,"digest":"md5-/YQ4OmYb1FBaOg0GAJ/RWg==","length":66307753,"stub":true},"cordova-2.4.10.tgz":{"content_type":"application/octet-stream","revpos":95,"digest":"md5-gbP8shZcgbyr+YDYwOkDBw==","length":66302740,"stub":true},"cordova-2.4.9.tgz":{"content_type":"application/octet-stream","revpos":93,"digest":"md5-o/F2Uf3GjO1YSMOQ2+rJoA==","length":65905881,"stub":true},"cordova-2.4.8.tgz":{"content_type":"application/octet-stream","revpos":91,"digest":"md5-Z1OoyhmBSOr6CnRb8kKjrw==","length":66302802,"stub":true},"cordova-2.4.7.tgz":{"content_type":"application/octet-stream","revpos":89,"digest":"md5-YMCJIjnD5VwCmWeHVRU7GQ==","length":52772741,"stub":true},"cordova-2.4.6.tgz":{"content_type":"application/octet-stream","revpos":87,"digest":"md5-eL7dQfSIgJX/vHG58bqBvA==","length":66296458,"stub":true},"cordova-2.4.5.tgz":{"content_type":"application/octet-stream","revpos":85,"digest":"md5-DaFXXc7Eh7vEgSItOU+kuw==","length":66296470,"stub":true},"cordova-2.4.4.tgz":{"content_type":"application/octet-stream","revpos":83,"digest":"md5-xcR1SaKMCJLQphKpW/EP5g==","length":66296444,"stub":true},"cordova-2.4.3.tgz":{"content_type":"application/octet-stream","revpos":81,"digest":"md5-p4R1LL5fXzABRwdew5lpxA==","length":67456712,"stub":true},"cordova-2.4.2.tgz":{"content_type":"application/octet-stream","revpos":79,"digest":"md5-uyQLv4OVwHbtacO8Wmmgtw==","length":29857842,"stub":true},"cordova-2.4.1.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-7LC139+NrgvJ0kuHMnTLjw==","length":6771821,"stub":true},"cordova-2.4.0.tgz":{"content_type":"application/octet-stream","revpos":67,"digest":"md5-oa17EM/u3KdHUt/weMxMDA==","length":17778870,"stub":true},"cordova-2.3.6.tgz":{"content_type":"application/octet-stream","revpos":65,"digest":"md5-nBv8UHEPE3RwHekxuRMR/A==","length":6772904,"stub":true},"cordova-2.3.5.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-Ju5e8531J2bWZYys1DgT/Q==","length":6771824,"stub":true},"cordova-2.3.3.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-8+z+kmOGwsBPoSNptyksqA==","length":6770980,"stub":true},"cordova-2.3.2.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-jvzg5+qr5fpTt6nWk4OWuw==","length":6770964,"stub":true},"cordova-2.3.1.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-M2BFeZyWMEBPOmOIh0Hstw==","length":6770932,"stub":true},"cordova-2.3.0.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-3W3T+X9mLs7dVckWe5AC1Q==","length":6770935,"stub":true},"cordova-2.2.0.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-SyJVmFaGsCyCU4KwLZaASg==","length":19359291,"stub":true},"cordova-0.1.14.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-grUxOqUfKhnYEiEonHgF9g==","length":19359522,"stub":true},"cordova-0.1.13.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-COP6KHjQE+zA9pZltq0B2Q==","length":19359656,"stub":true},"cordova-0.1.12.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-E/eooAUHCQTfOlraBl8+0g==","length":19358090,"stub":true},"cordova-0.1.11.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-rZXD7c4WonNR1MlhlN0maw==","length":19357953,"stub":true},"cordova-0.1.10.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-LeX6F0zfobzArqyZASrHFg==","length":19357797,"stub":true},"cordova-0.1.9.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-44TUGS7srXFlfeVENFM7vw==","length":19356998,"stub":true},"cordova-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-tJhjAwtQfZmma70wrcHccQ==","length":19357229,"stub":true},"cordova-0.1.7.tgz":{"content_typ
27 error     at Object.parse (native)
27 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:220:23)
27 error     at Request.init.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/main.js:120:22)
27 error     at Request.EventEmitter.emit (events.js:91:17)
27 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/main.js:648:16)
27 error     at Request.EventEmitter.emit (events.js:115:20)
27 error     at IncomingMessage.Request.start.self.req.self.httpModule.request.buffer (/usr/local/lib/node_modules/npm/node_modules/request/main.js:610:14)
27 error     at IncomingMessage.EventEmitter.emit (events.js:115:20)
27 error     at IncomingMessage._emitEnd (http.js:366:10)
27 error     at http.js:1306:11
28 error If you need help, you may report this log at:
28 error     <http://github.com/isaacs/npm/issues>
28 error or email it to:
28 error     <npm-@googlegroups.com>
29 error System Darwin 13.0.0
30 error command "node" "/usr/local/bin/npm" "install" "-g" "cordova"
31 error cwd /Applications/XAMPP/xamppfiles/htdocs/SenchaTraining/ExtJS251/labsolutions/ext
32 error node -v v0.8.8
33 error npm -v 1.1.59
34 error type unexpected_eos
35 verbose exit [ 1, true ]
